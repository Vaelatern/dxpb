// Code generated by capnpc-go. DO NOT EDIT.

package spec

import (
	context "golang.org/x/net/context"
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Arch uint16

// Arch_TypeID is the unique identifier for the type Arch.
const Arch_TypeID = 0x838f23a24aa17915

// Values of Arch.
const (
	Arch_noarch    Arch = 0
	Arch_x8664     Arch = 1
	Arch_x8664Musl Arch = 2
	Arch_i686      Arch = 3
	Arch_i686Musl  Arch = 4
	Arch_armV6     Arch = 5
	Arch_armV6Musl Arch = 6
)

// String returns the enum's constant name.
func (c Arch) String() string {
	switch c {
	case Arch_noarch:
		return "noarch"
	case Arch_x8664:
		return "x8664"
	case Arch_x8664Musl:
		return "x8664Musl"
	case Arch_i686:
		return "i686"
	case Arch_i686Musl:
		return "i686Musl"
	case Arch_armV6:
		return "armV6"
	case Arch_armV6Musl:
		return "armV6Musl"

	default:
		return ""
	}
}

// ArchFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ArchFromString(c string) Arch {
	switch c {
	case "noarch":
		return Arch_noarch
	case "x8664":
		return Arch_x8664
	case "x8664Musl":
		return Arch_x8664Musl
	case "i686":
		return Arch_i686
	case "i686Musl":
		return Arch_i686Musl
	case "armV6":
		return Arch_armV6
	case "armV6Musl":
		return Arch_armV6Musl

	default:
		return 0
	}
}

type Arch_List struct{ capnp.List }

func NewArch_List(s *capnp.Segment, sz int32) (Arch_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Arch_List{l.List}, err
}

func (l Arch_List) At(i int) Arch {
	ul := capnp.UInt16List{List: l.List}
	return Arch(ul.At(i))
}

func (l Arch_List) Set(i int, v Arch) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type GithubEvent struct{ capnp.Struct }
type GithubEvent_commit GithubEvent
type GithubEvent_pullRequest GithubEvent
type GithubEvent_issue GithubEvent
type GithubEvent_Which uint16

const (
	GithubEvent_Which_commit      GithubEvent_Which = 0
	GithubEvent_Which_pullRequest GithubEvent_Which = 1
	GithubEvent_Which_issue       GithubEvent_Which = 2
)

func (w GithubEvent_Which) String() string {
	const s = "commitpullRequestissue"
	switch w {
	case GithubEvent_Which_commit:
		return s[0:6]
	case GithubEvent_Which_pullRequest:
		return s[6:17]
	case GithubEvent_Which_issue:
		return s[17:22]

	}
	return "GithubEvent_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// GithubEvent_TypeID is the unique identifier for the type GithubEvent.
const GithubEvent_TypeID = 0x992b0cc20a124b84

func NewGithubEvent(s *capnp.Segment) (GithubEvent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return GithubEvent{st}, err
}

func NewRootGithubEvent(s *capnp.Segment) (GithubEvent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return GithubEvent{st}, err
}

func ReadRootGithubEvent(msg *capnp.Message) (GithubEvent, error) {
	root, err := msg.RootPtr()
	return GithubEvent{root.Struct()}, err
}

func (s GithubEvent) String() string {
	str, _ := text.Marshal(0x992b0cc20a124b84, s.Struct)
	return str
}

func (s GithubEvent) Which() GithubEvent_Which {
	return GithubEvent_Which(s.Struct.Uint16(0))
}
func (s GithubEvent) Who() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s GithubEvent) HasWho() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s GithubEvent) WhoBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s GithubEvent) SetWho(v string) error {
	return s.Struct.SetText(0, v)
}

func (s GithubEvent) Commit() GithubEvent_commit { return GithubEvent_commit(s) }

func (s GithubEvent) SetCommit() {
	s.Struct.SetUint16(0, 0)
}

func (s GithubEvent_commit) Hash() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s GithubEvent_commit) HasHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s GithubEvent_commit) HashBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s GithubEvent_commit) SetHash(v string) error {
	return s.Struct.SetText(1, v)
}

func (s GithubEvent_commit) Branch() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s GithubEvent_commit) HasBranch() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s GithubEvent_commit) BranchBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s GithubEvent_commit) SetBranch(v string) error {
	return s.Struct.SetText(2, v)
}

func (s GithubEvent_commit) Msg() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s GithubEvent_commit) HasMsg() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s GithubEvent_commit) MsgBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s GithubEvent_commit) SetMsg(v string) error {
	return s.Struct.SetText(3, v)
}

func (s GithubEvent) PullRequest() GithubEvent_pullRequest { return GithubEvent_pullRequest(s) }

func (s GithubEvent) SetPullRequest() {
	s.Struct.SetUint16(0, 1)
}

func (s GithubEvent_pullRequest) Number() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s GithubEvent_pullRequest) SetNumber(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s GithubEvent_pullRequest) Msg() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s GithubEvent_pullRequest) HasMsg() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s GithubEvent_pullRequest) MsgBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s GithubEvent_pullRequest) SetMsg(v string) error {
	return s.Struct.SetText(1, v)
}

func (s GithubEvent_pullRequest) Action() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s GithubEvent_pullRequest) HasAction() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s GithubEvent_pullRequest) ActionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s GithubEvent_pullRequest) SetAction(v string) error {
	return s.Struct.SetText(2, v)
}

func (s GithubEvent) Issue() GithubEvent_issue { return GithubEvent_issue(s) }

func (s GithubEvent) SetIssue() {
	s.Struct.SetUint16(0, 2)
}

func (s GithubEvent_issue) Number() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s GithubEvent_issue) SetNumber(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s GithubEvent_issue) Msg() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s GithubEvent_issue) HasMsg() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s GithubEvent_issue) MsgBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s GithubEvent_issue) SetMsg(v string) error {
	return s.Struct.SetText(1, v)
}

func (s GithubEvent_issue) Action() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s GithubEvent_issue) HasAction() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s GithubEvent_issue) ActionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s GithubEvent_issue) SetAction(v string) error {
	return s.Struct.SetText(2, v)
}

// GithubEvent_List is a list of GithubEvent.
type GithubEvent_List struct{ capnp.List }

// NewGithubEvent creates a new list of GithubEvent.
func NewGithubEvent_List(s *capnp.Segment, sz int32) (GithubEvent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return GithubEvent_List{l}, err
}

func (s GithubEvent_List) At(i int) GithubEvent { return GithubEvent{s.List.Struct(i)} }

func (s GithubEvent_List) Set(i int, v GithubEvent) error { return s.List.SetStruct(i, v.Struct) }

func (s GithubEvent_List) String() string {
	str, _ := text.MarshalList(0x992b0cc20a124b84, s.List)
	return str
}

// GithubEvent_Promise is a wrapper for a GithubEvent promised by a client call.
type GithubEvent_Promise struct{ *capnp.Pipeline }

func (p GithubEvent_Promise) Struct() (GithubEvent, error) {
	s, err := p.Pipeline.Struct()
	return GithubEvent{s}, err
}

func (p GithubEvent_Promise) Commit() GithubEvent_commit_Promise {
	return GithubEvent_commit_Promise{p.Pipeline}
}

// GithubEvent_commit_Promise is a wrapper for a GithubEvent_commit promised by a client call.
type GithubEvent_commit_Promise struct{ *capnp.Pipeline }

func (p GithubEvent_commit_Promise) Struct() (GithubEvent_commit, error) {
	s, err := p.Pipeline.Struct()
	return GithubEvent_commit{s}, err
}

func (p GithubEvent_Promise) PullRequest() GithubEvent_pullRequest_Promise {
	return GithubEvent_pullRequest_Promise{p.Pipeline}
}

// GithubEvent_pullRequest_Promise is a wrapper for a GithubEvent_pullRequest promised by a client call.
type GithubEvent_pullRequest_Promise struct{ *capnp.Pipeline }

func (p GithubEvent_pullRequest_Promise) Struct() (GithubEvent_pullRequest, error) {
	s, err := p.Pipeline.Struct()
	return GithubEvent_pullRequest{s}, err
}

func (p GithubEvent_Promise) Issue() GithubEvent_issue_Promise {
	return GithubEvent_issue_Promise{p.Pipeline}
}

// GithubEvent_issue_Promise is a wrapper for a GithubEvent_issue promised by a client call.
type GithubEvent_issue_Promise struct{ *capnp.Pipeline }

func (p GithubEvent_issue_Promise) Struct() (GithubEvent_issue, error) {
	s, err := p.Pipeline.Struct()
	return GithubEvent_issue{s}, err
}

type Results uint16

// Results_TypeID is the unique identifier for the type Results.
const Results_TypeID = 0xb28d687bb0cb1f6b

// Values of Results.
const (
	Results_ok     Results = 0
	Results_err    Results = 1
	Results_reject Results = 2
)

// String returns the enum's constant name.
func (c Results) String() string {
	switch c {
	case Results_ok:
		return "ok"
	case Results_err:
		return "err"
	case Results_reject:
		return "reject"

	default:
		return ""
	}
}

// ResultsFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ResultsFromString(c string) Results {
	switch c {
	case "ok":
		return Results_ok
	case "err":
		return Results_err
	case "reject":
		return Results_reject

	default:
		return 0
	}
}

type Results_List struct{ capnp.List }

func NewResults_List(s *capnp.Segment, sz int32) (Results_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Results_List{l.List}, err
}

func (l Results_List) At(i int) Results {
	ul := capnp.UInt16List{List: l.List}
	return Results(ul.At(i))
}

func (l Results_List) Set(i int, v Results) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type BuildType uint16

// BuildType_TypeID is the unique identifier for the type BuildType.
const BuildType_TypeID = 0xb8a5ce903391283e

// Values of BuildType.
const (
	BuildType_bulk       BuildType = 0
	BuildType_individual BuildType = 1
)

// String returns the enum's constant name.
func (c BuildType) String() string {
	switch c {
	case BuildType_bulk:
		return "bulk"
	case BuildType_individual:
		return "individual"

	default:
		return ""
	}
}

// BuildTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func BuildTypeFromString(c string) BuildType {
	switch c {
	case "bulk":
		return BuildType_bulk
	case "individual":
		return BuildType_individual

	default:
		return 0
	}
}

type BuildType_List struct{ capnp.List }

func NewBuildType_List(s *capnp.Segment, sz int32) (BuildType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return BuildType_List{l.List}, err
}

func (l BuildType_List) At(i int) BuildType {
	ul := capnp.UInt16List{List: l.List}
	return BuildType(ul.At(i))
}

func (l BuildType_List) Set(i int, v BuildType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Logger struct{ Client capnp.Client }

// Logger_TypeID is the unique identifier for the type Logger.
const Logger_TypeID = 0xced160c65625ebcc

func (c Logger) Append(ctx context.Context, params func(Logger_append_Params) error, opts ...capnp.CallOption) Logger_append_Results_Promise {
	if c.Client == nil {
		return Logger_append_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xced160c65625ebcc,
			MethodID:      0,
			InterfaceName: "basic.capnp:Logger",
			MethodName:    "append",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Logger_append_Params{Struct: s}) }
	}
	return Logger_append_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Logger_Server interface {
	Append(Logger_append) error
}

func Logger_ServerToClient(s Logger_Server) Logger {
	c, _ := s.(server.Closer)
	return Logger{Client: server.New(Logger_Methods(nil, s), c)}
}

func Logger_Methods(methods []server.Method, s Logger_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xced160c65625ebcc,
			MethodID:      0,
			InterfaceName: "basic.capnp:Logger",
			MethodName:    "append",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Logger_append{c, opts, Logger_append_Params{Struct: p}, Logger_append_Results{Struct: r}}
			return s.Append(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	return methods
}

// Logger_append holds the arguments for a server call to Logger.append.
type Logger_append struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Logger_append_Params
	Results Logger_append_Results
}

type Logger_append_Params struct{ capnp.Struct }

// Logger_append_Params_TypeID is the unique identifier for the type Logger_append_Params.
const Logger_append_Params_TypeID = 0xc4db11d8bf7d0e78

func NewLogger_append_Params(s *capnp.Segment) (Logger_append_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Logger_append_Params{st}, err
}

func NewRootLogger_append_Params(s *capnp.Segment) (Logger_append_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Logger_append_Params{st}, err
}

func ReadRootLogger_append_Params(msg *capnp.Message) (Logger_append_Params, error) {
	root, err := msg.RootPtr()
	return Logger_append_Params{root.Struct()}, err
}

func (s Logger_append_Params) String() string {
	str, _ := text.Marshal(0xc4db11d8bf7d0e78, s.Struct)
	return str
}

func (s Logger_append_Params) Logs() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Logger_append_Params) HasLogs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Logger_append_Params) SetLogs(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Logger_append_Params_List is a list of Logger_append_Params.
type Logger_append_Params_List struct{ capnp.List }

// NewLogger_append_Params creates a new list of Logger_append_Params.
func NewLogger_append_Params_List(s *capnp.Segment, sz int32) (Logger_append_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Logger_append_Params_List{l}, err
}

func (s Logger_append_Params_List) At(i int) Logger_append_Params {
	return Logger_append_Params{s.List.Struct(i)}
}

func (s Logger_append_Params_List) Set(i int, v Logger_append_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Logger_append_Params_List) String() string {
	str, _ := text.MarshalList(0xc4db11d8bf7d0e78, s.List)
	return str
}

// Logger_append_Params_Promise is a wrapper for a Logger_append_Params promised by a client call.
type Logger_append_Params_Promise struct{ *capnp.Pipeline }

func (p Logger_append_Params_Promise) Struct() (Logger_append_Params, error) {
	s, err := p.Pipeline.Struct()
	return Logger_append_Params{s}, err
}

type Logger_append_Results struct{ capnp.Struct }

// Logger_append_Results_TypeID is the unique identifier for the type Logger_append_Results.
const Logger_append_Results_TypeID = 0xcaa77452f9c37eeb

func NewLogger_append_Results(s *capnp.Segment) (Logger_append_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Logger_append_Results{st}, err
}

func NewRootLogger_append_Results(s *capnp.Segment) (Logger_append_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Logger_append_Results{st}, err
}

func ReadRootLogger_append_Results(msg *capnp.Message) (Logger_append_Results, error) {
	root, err := msg.RootPtr()
	return Logger_append_Results{root.Struct()}, err
}

func (s Logger_append_Results) String() string {
	str, _ := text.Marshal(0xcaa77452f9c37eeb, s.Struct)
	return str
}

// Logger_append_Results_List is a list of Logger_append_Results.
type Logger_append_Results_List struct{ capnp.List }

// NewLogger_append_Results creates a new list of Logger_append_Results.
func NewLogger_append_Results_List(s *capnp.Segment, sz int32) (Logger_append_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Logger_append_Results_List{l}, err
}

func (s Logger_append_Results_List) At(i int) Logger_append_Results {
	return Logger_append_Results{s.List.Struct(i)}
}

func (s Logger_append_Results_List) Set(i int, v Logger_append_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Logger_append_Results_List) String() string {
	str, _ := text.MarshalList(0xcaa77452f9c37eeb, s.List)
	return str
}

// Logger_append_Results_Promise is a wrapper for a Logger_append_Results promised by a client call.
type Logger_append_Results_Promise struct{ *capnp.Pipeline }

func (p Logger_append_Results_Promise) Struct() (Logger_append_Results, error) {
	s, err := p.Pipeline.Struct()
	return Logger_append_Results{s}, err
}

type IrcBot struct{ Client capnp.Client }

// IrcBot_TypeID is the unique identifier for the type IrcBot.
const IrcBot_TypeID = 0xbb6513902c830e39

func (c IrcBot) NoteGhEvent(ctx context.Context, params func(IrcBot_noteGhEvent_Params) error, opts ...capnp.CallOption) IrcBot_noteGhEvent_Results_Promise {
	if c.Client == nil {
		return IrcBot_noteGhEvent_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xbb6513902c830e39,
			MethodID:      0,
			InterfaceName: "basic.capnp:IrcBot",
			MethodName:    "noteGhEvent",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(IrcBot_noteGhEvent_Params{Struct: s}) }
	}
	return IrcBot_noteGhEvent_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type IrcBot_Server interface {
	NoteGhEvent(IrcBot_noteGhEvent) error
}

func IrcBot_ServerToClient(s IrcBot_Server) IrcBot {
	c, _ := s.(server.Closer)
	return IrcBot{Client: server.New(IrcBot_Methods(nil, s), c)}
}

func IrcBot_Methods(methods []server.Method, s IrcBot_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbb6513902c830e39,
			MethodID:      0,
			InterfaceName: "basic.capnp:IrcBot",
			MethodName:    "noteGhEvent",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := IrcBot_noteGhEvent{c, opts, IrcBot_noteGhEvent_Params{Struct: p}, IrcBot_noteGhEvent_Results{Struct: r}}
			return s.NoteGhEvent(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	return methods
}

// IrcBot_noteGhEvent holds the arguments for a server call to IrcBot.noteGhEvent.
type IrcBot_noteGhEvent struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  IrcBot_noteGhEvent_Params
	Results IrcBot_noteGhEvent_Results
}

type IrcBot_noteGhEvent_Params struct{ capnp.Struct }

// IrcBot_noteGhEvent_Params_TypeID is the unique identifier for the type IrcBot_noteGhEvent_Params.
const IrcBot_noteGhEvent_Params_TypeID = 0xa5eec3de87bdd251

func NewIrcBot_noteGhEvent_Params(s *capnp.Segment) (IrcBot_noteGhEvent_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IrcBot_noteGhEvent_Params{st}, err
}

func NewRootIrcBot_noteGhEvent_Params(s *capnp.Segment) (IrcBot_noteGhEvent_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IrcBot_noteGhEvent_Params{st}, err
}

func ReadRootIrcBot_noteGhEvent_Params(msg *capnp.Message) (IrcBot_noteGhEvent_Params, error) {
	root, err := msg.RootPtr()
	return IrcBot_noteGhEvent_Params{root.Struct()}, err
}

func (s IrcBot_noteGhEvent_Params) String() string {
	str, _ := text.Marshal(0xa5eec3de87bdd251, s.Struct)
	return str
}

func (s IrcBot_noteGhEvent_Params) Gh() (GithubEvent, error) {
	p, err := s.Struct.Ptr(0)
	return GithubEvent{Struct: p.Struct()}, err
}

func (s IrcBot_noteGhEvent_Params) HasGh() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IrcBot_noteGhEvent_Params) SetGh(v GithubEvent) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGh sets the gh field to a newly
// allocated GithubEvent struct, preferring placement in s's segment.
func (s IrcBot_noteGhEvent_Params) NewGh() (GithubEvent, error) {
	ss, err := NewGithubEvent(s.Struct.Segment())
	if err != nil {
		return GithubEvent{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// IrcBot_noteGhEvent_Params_List is a list of IrcBot_noteGhEvent_Params.
type IrcBot_noteGhEvent_Params_List struct{ capnp.List }

// NewIrcBot_noteGhEvent_Params creates a new list of IrcBot_noteGhEvent_Params.
func NewIrcBot_noteGhEvent_Params_List(s *capnp.Segment, sz int32) (IrcBot_noteGhEvent_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IrcBot_noteGhEvent_Params_List{l}, err
}

func (s IrcBot_noteGhEvent_Params_List) At(i int) IrcBot_noteGhEvent_Params {
	return IrcBot_noteGhEvent_Params{s.List.Struct(i)}
}

func (s IrcBot_noteGhEvent_Params_List) Set(i int, v IrcBot_noteGhEvent_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IrcBot_noteGhEvent_Params_List) String() string {
	str, _ := text.MarshalList(0xa5eec3de87bdd251, s.List)
	return str
}

// IrcBot_noteGhEvent_Params_Promise is a wrapper for a IrcBot_noteGhEvent_Params promised by a client call.
type IrcBot_noteGhEvent_Params_Promise struct{ *capnp.Pipeline }

func (p IrcBot_noteGhEvent_Params_Promise) Struct() (IrcBot_noteGhEvent_Params, error) {
	s, err := p.Pipeline.Struct()
	return IrcBot_noteGhEvent_Params{s}, err
}

func (p IrcBot_noteGhEvent_Params_Promise) Gh() GithubEvent_Promise {
	return GithubEvent_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type IrcBot_noteGhEvent_Results struct{ capnp.Struct }

// IrcBot_noteGhEvent_Results_TypeID is the unique identifier for the type IrcBot_noteGhEvent_Results.
const IrcBot_noteGhEvent_Results_TypeID = 0xf5bdbbc1d36794d7

func NewIrcBot_noteGhEvent_Results(s *capnp.Segment) (IrcBot_noteGhEvent_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IrcBot_noteGhEvent_Results{st}, err
}

func NewRootIrcBot_noteGhEvent_Results(s *capnp.Segment) (IrcBot_noteGhEvent_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IrcBot_noteGhEvent_Results{st}, err
}

func ReadRootIrcBot_noteGhEvent_Results(msg *capnp.Message) (IrcBot_noteGhEvent_Results, error) {
	root, err := msg.RootPtr()
	return IrcBot_noteGhEvent_Results{root.Struct()}, err
}

func (s IrcBot_noteGhEvent_Results) String() string {
	str, _ := text.Marshal(0xf5bdbbc1d36794d7, s.Struct)
	return str
}

// IrcBot_noteGhEvent_Results_List is a list of IrcBot_noteGhEvent_Results.
type IrcBot_noteGhEvent_Results_List struct{ capnp.List }

// NewIrcBot_noteGhEvent_Results creates a new list of IrcBot_noteGhEvent_Results.
func NewIrcBot_noteGhEvent_Results_List(s *capnp.Segment, sz int32) (IrcBot_noteGhEvent_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return IrcBot_noteGhEvent_Results_List{l}, err
}

func (s IrcBot_noteGhEvent_Results_List) At(i int) IrcBot_noteGhEvent_Results {
	return IrcBot_noteGhEvent_Results{s.List.Struct(i)}
}

func (s IrcBot_noteGhEvent_Results_List) Set(i int, v IrcBot_noteGhEvent_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IrcBot_noteGhEvent_Results_List) String() string {
	str, _ := text.MarshalList(0xf5bdbbc1d36794d7, s.List)
	return str
}

// IrcBot_noteGhEvent_Results_Promise is a wrapper for a IrcBot_noteGhEvent_Results promised by a client call.
type IrcBot_noteGhEvent_Results_Promise struct{ *capnp.Pipeline }

func (p IrcBot_noteGhEvent_Results_Promise) Struct() (IrcBot_noteGhEvent_Results, error) {
	s, err := p.Pipeline.Struct()
	return IrcBot_noteGhEvent_Results{s}, err
}

type Builder struct{ Client capnp.Client }

// Builder_TypeID is the unique identifier for the type Builder.
const Builder_TypeID = 0x8e22cadf94183d27

func (c Builder) Capabilities(ctx context.Context, params func(Builder_capabilities_Params) error, opts ...capnp.CallOption) Builder_capabilities_Results_Promise {
	if c.Client == nil {
		return Builder_capabilities_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x8e22cadf94183d27,
			MethodID:      0,
			InterfaceName: "basic.capnp:Builder",
			MethodName:    "capabilities",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Builder_capabilities_Params{Struct: s}) }
	}
	return Builder_capabilities_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Builder) Build(ctx context.Context, params func(Builder_build_Params) error, opts ...capnp.CallOption) Builder_build_Results_Promise {
	if c.Client == nil {
		return Builder_build_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x8e22cadf94183d27,
			MethodID:      1,
			InterfaceName: "basic.capnp:Builder",
			MethodName:    "build",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Builder_build_Params{Struct: s}) }
	}
	return Builder_build_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Builder_Server interface {
	Capabilities(Builder_capabilities) error

	Build(Builder_build) error
}

func Builder_ServerToClient(s Builder_Server) Builder {
	c, _ := s.(server.Closer)
	return Builder{Client: server.New(Builder_Methods(nil, s), c)}
}

func Builder_Methods(methods []server.Method, s Builder_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8e22cadf94183d27,
			MethodID:      0,
			InterfaceName: "basic.capnp:Builder",
			MethodName:    "capabilities",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Builder_capabilities{c, opts, Builder_capabilities_Params{Struct: p}, Builder_capabilities_Results{Struct: r}}
			return s.Capabilities(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8e22cadf94183d27,
			MethodID:      1,
			InterfaceName: "basic.capnp:Builder",
			MethodName:    "build",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Builder_build{c, opts, Builder_build_Params{Struct: p}, Builder_build_Results{Struct: r}}
			return s.Build(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	return methods
}

// Builder_capabilities holds the arguments for a server call to Builder.capabilities.
type Builder_capabilities struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Builder_capabilities_Params
	Results Builder_capabilities_Results
}

// Builder_build holds the arguments for a server call to Builder.build.
type Builder_build struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Builder_build_Params
	Results Builder_build_Results
}

type Builder_What struct{ capnp.Struct }

// Builder_What_TypeID is the unique identifier for the type Builder_What.
const Builder_What_TypeID = 0xaf9eac8061af076b

func NewBuilder_What(s *capnp.Segment) (Builder_What, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Builder_What{st}, err
}

func NewRootBuilder_What(s *capnp.Segment) (Builder_What, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Builder_What{st}, err
}

func ReadRootBuilder_What(msg *capnp.Message) (Builder_What, error) {
	root, err := msg.RootPtr()
	return Builder_What{root.Struct()}, err
}

func (s Builder_What) String() string {
	str, _ := text.Marshal(0xaf9eac8061af076b, s.Struct)
	return str
}

func (s Builder_What) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Builder_What) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Builder_What) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Builder_What) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Builder_What) Ver() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Builder_What) HasVer() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Builder_What) VerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Builder_What) SetVer(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Builder_What) Arch() Arch {
	return Arch(s.Struct.Uint16(0))
}

func (s Builder_What) SetArch(v Arch) {
	s.Struct.SetUint16(0, uint16(v))
}

// Builder_What_List is a list of Builder_What.
type Builder_What_List struct{ capnp.List }

// NewBuilder_What creates a new list of Builder_What.
func NewBuilder_What_List(s *capnp.Segment, sz int32) (Builder_What_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Builder_What_List{l}, err
}

func (s Builder_What_List) At(i int) Builder_What { return Builder_What{s.List.Struct(i)} }

func (s Builder_What_List) Set(i int, v Builder_What) error { return s.List.SetStruct(i, v.Struct) }

func (s Builder_What_List) String() string {
	str, _ := text.MarshalList(0xaf9eac8061af076b, s.List)
	return str
}

// Builder_What_Promise is a wrapper for a Builder_What promised by a client call.
type Builder_What_Promise struct{ *capnp.Pipeline }

func (p Builder_What_Promise) Struct() (Builder_What, error) {
	s, err := p.Pipeline.Struct()
	return Builder_What{s}, err
}

type Builder_Capability struct{ capnp.Struct }

// Builder_Capability_TypeID is the unique identifier for the type Builder_Capability.
const Builder_Capability_TypeID = 0xf64adeda9400745f

func NewBuilder_Capability(s *capnp.Segment) (Builder_Capability, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Builder_Capability{st}, err
}

func NewRootBuilder_Capability(s *capnp.Segment) (Builder_Capability, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Builder_Capability{st}, err
}

func ReadRootBuilder_Capability(msg *capnp.Message) (Builder_Capability, error) {
	root, err := msg.RootPtr()
	return Builder_Capability{root.Struct()}, err
}

func (s Builder_Capability) String() string {
	str, _ := text.Marshal(0xf64adeda9400745f, s.Struct)
	return str
}

func (s Builder_Capability) Arch() Arch {
	return Arch(s.Struct.Uint16(0))
}

func (s Builder_Capability) SetArch(v Arch) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Builder_Capability) Type() BuildType {
	return BuildType(s.Struct.Uint16(2) ^ 1)
}

func (s Builder_Capability) SetType(v BuildType) {
	s.Struct.SetUint16(2, uint16(v)^1)
}

// Builder_Capability_List is a list of Builder_Capability.
type Builder_Capability_List struct{ capnp.List }

// NewBuilder_Capability creates a new list of Builder_Capability.
func NewBuilder_Capability_List(s *capnp.Segment, sz int32) (Builder_Capability_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Builder_Capability_List{l}, err
}

func (s Builder_Capability_List) At(i int) Builder_Capability {
	return Builder_Capability{s.List.Struct(i)}
}

func (s Builder_Capability_List) Set(i int, v Builder_Capability) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Builder_Capability_List) String() string {
	str, _ := text.MarshalList(0xf64adeda9400745f, s.List)
	return str
}

// Builder_Capability_Promise is a wrapper for a Builder_Capability promised by a client call.
type Builder_Capability_Promise struct{ *capnp.Pipeline }

func (p Builder_Capability_Promise) Struct() (Builder_Capability, error) {
	s, err := p.Pipeline.Struct()
	return Builder_Capability{s}, err
}

type Builder_Opts struct{ capnp.Struct }

// Builder_Opts_TypeID is the unique identifier for the type Builder_Opts.
const Builder_Opts_TypeID = 0xf85627eda839d41a

func NewBuilder_Opts(s *capnp.Segment) (Builder_Opts, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Builder_Opts{st}, err
}

func NewRootBuilder_Opts(s *capnp.Segment) (Builder_Opts, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Builder_Opts{st}, err
}

func ReadRootBuilder_Opts(msg *capnp.Message) (Builder_Opts, error) {
	root, err := msg.RootPtr()
	return Builder_Opts{root.Struct()}, err
}

func (s Builder_Opts) String() string {
	str, _ := text.Marshal(0xf85627eda839d41a, s.Struct)
	return str
}

func (s Builder_Opts) IgnorePkgSpec() bool {
	return s.Struct.Bit(0)
}

func (s Builder_Opts) SetIgnorePkgSpec(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Builder_Opts) Log() Logger {
	p, _ := s.Struct.Ptr(0)
	return Logger{Client: p.Interface().Client()}
}

func (s Builder_Opts) HasLog() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Builder_Opts) SetLog(v Logger) error {
	if v.Client == nil {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Builder_Opts_List is a list of Builder_Opts.
type Builder_Opts_List struct{ capnp.List }

// NewBuilder_Opts creates a new list of Builder_Opts.
func NewBuilder_Opts_List(s *capnp.Segment, sz int32) (Builder_Opts_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Builder_Opts_List{l}, err
}

func (s Builder_Opts_List) At(i int) Builder_Opts { return Builder_Opts{s.List.Struct(i)} }

func (s Builder_Opts_List) Set(i int, v Builder_Opts) error { return s.List.SetStruct(i, v.Struct) }

func (s Builder_Opts_List) String() string {
	str, _ := text.MarshalList(0xf85627eda839d41a, s.List)
	return str
}

// Builder_Opts_Promise is a wrapper for a Builder_Opts promised by a client call.
type Builder_Opts_Promise struct{ *capnp.Pipeline }

func (p Builder_Opts_Promise) Struct() (Builder_Opts, error) {
	s, err := p.Pipeline.Struct()
	return Builder_Opts{s}, err
}

func (p Builder_Opts_Promise) Log() Logger {
	return Logger{Client: p.Pipeline.GetPipeline(0).Client()}
}

type Builder_capabilities_Params struct{ capnp.Struct }

// Builder_capabilities_Params_TypeID is the unique identifier for the type Builder_capabilities_Params.
const Builder_capabilities_Params_TypeID = 0x9fe0e82ce7dbd61e

func NewBuilder_capabilities_Params(s *capnp.Segment) (Builder_capabilities_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Builder_capabilities_Params{st}, err
}

func NewRootBuilder_capabilities_Params(s *capnp.Segment) (Builder_capabilities_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Builder_capabilities_Params{st}, err
}

func ReadRootBuilder_capabilities_Params(msg *capnp.Message) (Builder_capabilities_Params, error) {
	root, err := msg.RootPtr()
	return Builder_capabilities_Params{root.Struct()}, err
}

func (s Builder_capabilities_Params) String() string {
	str, _ := text.Marshal(0x9fe0e82ce7dbd61e, s.Struct)
	return str
}

// Builder_capabilities_Params_List is a list of Builder_capabilities_Params.
type Builder_capabilities_Params_List struct{ capnp.List }

// NewBuilder_capabilities_Params creates a new list of Builder_capabilities_Params.
func NewBuilder_capabilities_Params_List(s *capnp.Segment, sz int32) (Builder_capabilities_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Builder_capabilities_Params_List{l}, err
}

func (s Builder_capabilities_Params_List) At(i int) Builder_capabilities_Params {
	return Builder_capabilities_Params{s.List.Struct(i)}
}

func (s Builder_capabilities_Params_List) Set(i int, v Builder_capabilities_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Builder_capabilities_Params_List) String() string {
	str, _ := text.MarshalList(0x9fe0e82ce7dbd61e, s.List)
	return str
}

// Builder_capabilities_Params_Promise is a wrapper for a Builder_capabilities_Params promised by a client call.
type Builder_capabilities_Params_Promise struct{ *capnp.Pipeline }

func (p Builder_capabilities_Params_Promise) Struct() (Builder_capabilities_Params, error) {
	s, err := p.Pipeline.Struct()
	return Builder_capabilities_Params{s}, err
}

type Builder_capabilities_Results struct{ capnp.Struct }

// Builder_capabilities_Results_TypeID is the unique identifier for the type Builder_capabilities_Results.
const Builder_capabilities_Results_TypeID = 0x985efa717f498039

func NewBuilder_capabilities_Results(s *capnp.Segment) (Builder_capabilities_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Builder_capabilities_Results{st}, err
}

func NewRootBuilder_capabilities_Results(s *capnp.Segment) (Builder_capabilities_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Builder_capabilities_Results{st}, err
}

func ReadRootBuilder_capabilities_Results(msg *capnp.Message) (Builder_capabilities_Results, error) {
	root, err := msg.RootPtr()
	return Builder_capabilities_Results{root.Struct()}, err
}

func (s Builder_capabilities_Results) String() string {
	str, _ := text.Marshal(0x985efa717f498039, s.Struct)
	return str
}

func (s Builder_capabilities_Results) Result() (Builder_Capability_List, error) {
	p, err := s.Struct.Ptr(0)
	return Builder_Capability_List{List: p.List()}, err
}

func (s Builder_capabilities_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Builder_capabilities_Results) SetResult(v Builder_Capability_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewResult sets the result field to a newly
// allocated Builder_Capability_List, preferring placement in s's segment.
func (s Builder_capabilities_Results) NewResult(n int32) (Builder_Capability_List, error) {
	l, err := NewBuilder_Capability_List(s.Struct.Segment(), n)
	if err != nil {
		return Builder_Capability_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Builder_capabilities_Results_List is a list of Builder_capabilities_Results.
type Builder_capabilities_Results_List struct{ capnp.List }

// NewBuilder_capabilities_Results creates a new list of Builder_capabilities_Results.
func NewBuilder_capabilities_Results_List(s *capnp.Segment, sz int32) (Builder_capabilities_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Builder_capabilities_Results_List{l}, err
}

func (s Builder_capabilities_Results_List) At(i int) Builder_capabilities_Results {
	return Builder_capabilities_Results{s.List.Struct(i)}
}

func (s Builder_capabilities_Results_List) Set(i int, v Builder_capabilities_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Builder_capabilities_Results_List) String() string {
	str, _ := text.MarshalList(0x985efa717f498039, s.List)
	return str
}

// Builder_capabilities_Results_Promise is a wrapper for a Builder_capabilities_Results promised by a client call.
type Builder_capabilities_Results_Promise struct{ *capnp.Pipeline }

func (p Builder_capabilities_Results_Promise) Struct() (Builder_capabilities_Results, error) {
	s, err := p.Pipeline.Struct()
	return Builder_capabilities_Results{s}, err
}

type Builder_build_Params struct{ capnp.Struct }

// Builder_build_Params_TypeID is the unique identifier for the type Builder_build_Params.
const Builder_build_Params_TypeID = 0xe95aba507536661c

func NewBuilder_build_Params(s *capnp.Segment) (Builder_build_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Builder_build_Params{st}, err
}

func NewRootBuilder_build_Params(s *capnp.Segment) (Builder_build_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Builder_build_Params{st}, err
}

func ReadRootBuilder_build_Params(msg *capnp.Message) (Builder_build_Params, error) {
	root, err := msg.RootPtr()
	return Builder_build_Params{root.Struct()}, err
}

func (s Builder_build_Params) String() string {
	str, _ := text.Marshal(0xe95aba507536661c, s.Struct)
	return str
}

func (s Builder_build_Params) What() (Builder_What, error) {
	p, err := s.Struct.Ptr(0)
	return Builder_What{Struct: p.Struct()}, err
}

func (s Builder_build_Params) HasWhat() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Builder_build_Params) SetWhat(v Builder_What) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewWhat sets the what field to a newly
// allocated Builder_What struct, preferring placement in s's segment.
func (s Builder_build_Params) NewWhat() (Builder_What, error) {
	ss, err := NewBuilder_What(s.Struct.Segment())
	if err != nil {
		return Builder_What{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Builder_build_Params) Options() (Builder_Opts, error) {
	p, err := s.Struct.Ptr(1)
	return Builder_Opts{Struct: p.Struct()}, err
}

func (s Builder_build_Params) HasOptions() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Builder_build_Params) SetOptions(v Builder_Opts) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewOptions sets the options field to a newly
// allocated Builder_Opts struct, preferring placement in s's segment.
func (s Builder_build_Params) NewOptions() (Builder_Opts, error) {
	ss, err := NewBuilder_Opts(s.Struct.Segment())
	if err != nil {
		return Builder_Opts{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Builder_build_Params_List is a list of Builder_build_Params.
type Builder_build_Params_List struct{ capnp.List }

// NewBuilder_build_Params creates a new list of Builder_build_Params.
func NewBuilder_build_Params_List(s *capnp.Segment, sz int32) (Builder_build_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Builder_build_Params_List{l}, err
}

func (s Builder_build_Params_List) At(i int) Builder_build_Params {
	return Builder_build_Params{s.List.Struct(i)}
}

func (s Builder_build_Params_List) Set(i int, v Builder_build_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Builder_build_Params_List) String() string {
	str, _ := text.MarshalList(0xe95aba507536661c, s.List)
	return str
}

// Builder_build_Params_Promise is a wrapper for a Builder_build_Params promised by a client call.
type Builder_build_Params_Promise struct{ *capnp.Pipeline }

func (p Builder_build_Params_Promise) Struct() (Builder_build_Params, error) {
	s, err := p.Pipeline.Struct()
	return Builder_build_Params{s}, err
}

func (p Builder_build_Params_Promise) What() Builder_What_Promise {
	return Builder_What_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Builder_build_Params_Promise) Options() Builder_Opts_Promise {
	return Builder_Opts_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Builder_build_Results struct{ capnp.Struct }

// Builder_build_Results_TypeID is the unique identifier for the type Builder_build_Results.
const Builder_build_Results_TypeID = 0xd84b85756d95b69f

func NewBuilder_build_Results(s *capnp.Segment) (Builder_build_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Builder_build_Results{st}, err
}

func NewRootBuilder_build_Results(s *capnp.Segment) (Builder_build_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Builder_build_Results{st}, err
}

func ReadRootBuilder_build_Results(msg *capnp.Message) (Builder_build_Results, error) {
	root, err := msg.RootPtr()
	return Builder_build_Results{root.Struct()}, err
}

func (s Builder_build_Results) String() string {
	str, _ := text.Marshal(0xd84b85756d95b69f, s.Struct)
	return str
}

func (s Builder_build_Results) Done() Results {
	return Results(s.Struct.Uint16(0))
}

func (s Builder_build_Results) SetDone(v Results) {
	s.Struct.SetUint16(0, uint16(v))
}

// Builder_build_Results_List is a list of Builder_build_Results.
type Builder_build_Results_List struct{ capnp.List }

// NewBuilder_build_Results creates a new list of Builder_build_Results.
func NewBuilder_build_Results_List(s *capnp.Segment, sz int32) (Builder_build_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Builder_build_Results_List{l}, err
}

func (s Builder_build_Results_List) At(i int) Builder_build_Results {
	return Builder_build_Results{s.List.Struct(i)}
}

func (s Builder_build_Results_List) Set(i int, v Builder_build_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Builder_build_Results_List) String() string {
	str, _ := text.MarshalList(0xd84b85756d95b69f, s.List)
	return str
}

// Builder_build_Results_Promise is a wrapper for a Builder_build_Results promised by a client call.
type Builder_build_Results_Promise struct{ *capnp.Pipeline }

func (p Builder_build_Results_Promise) Struct() (Builder_build_Results, error) {
	s, err := p.Pipeline.Struct()
	return Builder_build_Results{s}, err
}

const schema_902d2bfc3bbf0d43 = "x\xda\xacVkl\x14\xf5\x16?g\x9e[\xee.\xdb" +
	"?S\x12n\x03w\x93\xder\x81B\x1b\xdarK\xbb" +
	"7\xbd[\x8aMm\xa1a\xa7\x124h\xd4\xd9\xddq" +
	"w\xe8\xbe\x98\x07\xa51<\"\x12\x12\"J\x13H\x84" +
	"\x04\x08M\x88~PQ\x8cF$\x84\x00bb5$" +
	"\xa8(J\xc0\xc7\x17$\x04?h|\x80\x8f1\xff\xd9" +
	"\xce\xec\xb4]\xf8\xe4\x97\xc9\xec\xec\x99\xdf\xef\x9c\xdf\xf9" +
	"\x9d\xf3\x9f\xa5Y\xb6\x8bi\xe6\x8f\x04\x00\xe4\x14/\xd8" +
	"\xb3G\x8e\xf6\x8f\xfd\xfb\x85\x1d@\x82\x8c\xbd2t\xe6" +
	"\x7f\xbf/n\xdc\x0b\x80\xd2\x7f\xb9\xddR''\x02H" +
	"\x1d\xdcq@{A\xe7\x9c}_\x8d\xd7=\x0f$\xc8" +
	"N\x0a<\xc0\x8dIG\xb9\xe5\x00\xd2\x05n\x97\xf4O" +
	"^\x04\xb0;\xb6\xf7m\xdbx\xf7\xf1\x17\x81\xd4 \x00" +
	"\x8f\"@+\xf2\xfd\x08(\x85\xf8\x18\xa0\xfd\xec\xaaY" +
	"3\xce\x05\x17\x1f\x009\x88>\xde\x1eNd\x01\xa4N" +
	"\xfe\x9c\xd4C\x81\xa4\x15\xfc\x0d@\xfb_\x9f]\xbd\xb1" +
	"\xe4\xbb\xaf\x8f\x94\xe0hR\xad\x17\xf8n\x04\xce\x96?" +
	">\xbd\xeb\xfa\xf9\xef\x8f\x01\x91<\xa2W\xf9\x16J\xf4" +
	"\x96C4$\x1eW\xb6\xbfr\xf88\xc85\xe8+\x82" +
	"g(\xfae~\\\xfa\xc6\xe1\xb9\xc6\xd3\x1a\x87\"\x1f" +
	"\xbe\xfetf\xcf\x89ibX\xc2\x98\xb4E\xa0\x81#" +
	"\xc2\x1a@\xfb\xff\x0bG[\xf7^<\xf6\xce\xb4\xc0=" +
	"\xc2\x09i\xbf\x138*,\x07\xb4;f\xeeX\xb2W" +
	"ROMWM8(\x1du\x02\x0f\x09\xbd\xd2\x07\xf4" +
	"\xce\xde<s\xcb\x99+\xe4\xea{\xfeb\xde\x10f\xd0" +
	"bN\x0a\xb4\x98[[\xcf\xdf\x194_\x1a/\x058" +
	":|!\xcc\xa2:|tk\xfe\xba\xf7\x9f\xbctq" +
	"\x1a\xcfY\xe1`\x09]\xba \xf4J\xb7\x1d\x9e\xd7v" +
	"K\x9d\xdf\x1e\xd6.\x81<\x07\x99r+fs\"\x02" +
	"\xb4^\x16\xea(\xe35\x81*r\xe4\xed\xfd9k\xe7" +
	"\xaa+\x8e|\x13\x94\x968\x8b\x06l\x11iJs\x9f" +
	"j\xb3\xe2\xef\xae\xbf9\xd1i*k\xeb!\xd1\xc9\xf9" +
	"\x988\x0ch\xbf\xf9\xdc#\x8f\xfe\xe3?c?V$" +
	"\x930\xf0\x03\xa0\xc4\x07(\xd7\xe7\xfb\xd2\x9f\x9c=u" +
	"\xfa'_u\x87\x02Q\x04\xee\xb7'\xcc}_^\xef" +
	"\xffyr\x0b\x1do\xee\x0c\xdc\x95F\x03\xf4nO\x80" +
	"\xb2m}fG\xfb\xc9;\xb5\xbfTf\xbb\x19\xb8\x0b" +
	"(\xddv\xd8j?\xedx\xf9\xf6\x82u\xbfN5\x06" +
	":\xb0U\xe3\xd2h\x95\x03[5\x0c\x8dvB1\xb4" +
	"dSR\xc1b\xbe\x18]\xa1'3\x00qDy." +
	"2\x00d \x0a\x80HzZ\x00\x90!\x9d\x83\x00\xc8" +
	"\x92\x8e\x06\x00\xe4Hs?\x00\xf2\xa4\x91\xfe'\x90\xf9" +
	"\x83\x00\xb1|A\xd1\x93\x99\xc8\xe6\xf6\xb6\xb6e\xb6s" +
	"\x1d\xb0\x0c\xc0lXkko\xb3\xe9e\xc02\xb2\x00" +
	"\x10Q\xf4\xdc\xba6\xdb\xb9\x96B&\xe7\xd1miY" +
	"1\xa5\xear\x10}>'\xa4\xc1\xd5\x8b\x84\xd6\x97\xcb" +
	"$\xa1\x86\xf0\xc3\x19\xc5\xb4W*E%\xa1e5`" +
	"\xcd\x91\xf0\x9a\xa2i\xc8\x01\x96\x07\xf0\x86\x0c\xdd\xe1%" +
	"\xcd\x1b\x80!\x8bD,w\x19]?\x90y-\xc0\x10" +
	"\"\xdaI\x17-lj\xaa\xd1\x85\x91\x84\xa5eS]" +
	"\x18G\xf4\xb2\xe5\xdclS\xaa\xde\xe4\xbe@\xc3\xeb\x07" +
	"U\xc3\xca\x9a\x06\x80\xcc\xb1\x1c\x00\x87\x00$\x14\x05\x90" +
	"\x03,\xca\xf5\x0c\xc6t'\x00g\x02\xc6Y\xc4j\xb7" +
	"2@\xfa\xc8#`(A\xafff\xacD\xcf&5" +
	"o:\xcd\xa9\xf6\x10\x95:\x00\xf91\x16\xe5\x0c\x83!" +
	"\xb4m\xf4\xf9\x84\xa8Q`B\xcc\x9f\xf4\xa17\x17d" +
	" \x01L\x88\xfd\x83>\xf4\xfcK:Z\x80\x11\x873" +
	"\x05\x0c\x02\x83A\xc0X\xb2\x90\xcbi\xa6]\xb4\xb2\xd9" +
	"Au\xa3\x05\xa2j\x98\x11\xcd0,\xd5\xcb,p\xcf" +
	"\xd2\xe3\x8a\xae\xe4\x0cp\x03i\\\x9f\x9e\xec.\x98M" +
	"\xf9\x82\xa9\xf6f\x9cB\xea\xe3\x11'\xcc/O\xed\x84" +
	"<5\x0c\xb2\xe9\x0cV\x97]\x0e\x88\xd5SUq\xb9" +
	"i\xebK\xa6\x0dzP=\x0d\x00r\x17\x8b\xf2j\x06" +
	"\x09\xa23\xe1\xa4\x8f\x8a\xf5\x00\x8br\x9cAdjJ" +
	"\x0e\xa7\x81\x0f\xb2(\xafe0\x9cWr\xaa+\x81\xb8" +
	"I\xd5\xdd\xfb0\xb55\x86\xcb'\x0a \x86}\xe98" +
	"\x9e\xa5\x0d\x17\xb3\xa6\xe1$\xe2`\xcf\xabu\xa6gv" +
	"\x9d3=\xb4\xf9laHTu=\xa6\xab\x1b\xd4\xa4" +
	"9\xdd\xf3\x91\xd4\xda\x91\xa2J\x11\x02\x0e\x02ip\x10" +
	"\xaa\xd6\x03\x84\x13Vv\xc8\xd6\xf2)m\x93\x96\xb2\x80" +
	"U\xa6\x8c\x0cU\x98-\x98\xf4]\xce1\xbd{~\xa0" +
	"\xbb|\x08I\x00C\xaaD\xdb\xed\x02\x88j\xde\x9c\xec" +
	"g\x96B\xad.\xa4\xd3\xaa\xde\xa4\x14\x8bj>\xe5v" +
	"s\x92\x8f\x1b\xca\x8d\x0ag\x0bi\x03C\xc0`\x08\xee" +
	"\x8bS\x1a\x084&\xa7McXU/\xa7\xed\x9e\x14" +
	"\xe8\x9e\x08\x84D\x81!\xbc\x18+\xe1T\xc8\xd77\x1e" +
	"M\xaec\xa9a\xa9\x1f\xaa\xb1\x069j\x88\xe8\x14C" +
	"\xf0S\x0cA\x18\xa6\x06\x85\x89\x9d\xe7:\"\x96\xb7r" +
	"\x09UG\x1e\x18\xe4\x01\xc5\x9c\x91\xf6FDI\x9aZ" +
	"!\xef\xfe\x9c\x9c\x91kMgcx\x95\xdfK\xc1T" +
	"!\xafb\xb8|DOqW\x05D\xaf'\x01\x0fq" +
	"\x11E\xacgQ^\xeas|c7\x80\xbc\x90Ey" +
	"\x19\x83\xe1\xe1\x8cbbuy\x9d\x96fj[\xa1H" +
	"\xeb0\xb0\xba\xbcP+M\x9b_\xe4\xd2&p\xe5\x15" +
	"+\xc9\x1b\xa8$o\xd5\xdf$o\x85m2\x18+\xed" +
	"\xdb\xca+\x82\x1e\x0c1g?\x8d8\xc3UR\x0d\xb1" +
	"\x82j\x88\xa4\xb1\xc1\xa7Z\xe5\xd1\x0f\x9b#E\xda3" +
	"\xefk\x09\x90\x0f\xe3\xfd4\x9bX\xa9\xaeh\xd3\x97\xd4" +
	"\xc4B\xea\x8b\xfaEck\x90\xa5\xa2\xd5\xf9\xb6TF" +
	"12\x9eL\x09]\xc9'\xbd\x9f~\x05++AO" +
	"\xc5\xd2\xb2\xf4YG/\xd7\xeb:\xa7\x992.aQ" +
	"ng\xd0\xd6\xd2\xf9\x82\xae\xc6\x87 \x92~\xa8\xa8&" +
	"\x11\x81A\x04\x14\xb3\x854\x92\xf2\x07\x1a]U\x80\x7f" +
	"\x05\x00\x00\xff\xff\xce\xff\x07y"

func init() {
	schemas.Register(schema_902d2bfc3bbf0d43,
		0x838f23a24aa17915,
		0x8e22cadf94183d27,
		0x985efa717f498039,
		0x992b0cc20a124b84,
		0x9fe0e82ce7dbd61e,
		0xa5eec3de87bdd251,
		0xaf9eac8061af076b,
		0xb28d687bb0cb1f6b,
		0xb8a5ce903391283e,
		0xbb6513902c830e39,
		0xc4db11d8bf7d0e78,
		0xcaa77452f9c37eeb,
		0xced160c65625ebcc,
		0xd1699ee23d138aae,
		0xd84b85756d95b69f,
		0xe95aba507536661c,
		0xf3a2260b5b588cb3,
		0xf5bdbbc1d36794d7,
		0xf64adeda9400745f,
		0xf71af9b93883827e,
		0xf85627eda839d41a)
}
