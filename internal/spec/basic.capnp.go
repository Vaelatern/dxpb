// Code generated by capnpc-go. DO NOT EDIT.

package spec

import (
	context "golang.org/x/net/context"
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Arch uint16

// Arch_TypeID is the unique identifier for the type Arch.
const Arch_TypeID = 0x838f23a24aa17915

// Values of Arch.
const (
	Arch_noarch    Arch = 0
	Arch_x8664     Arch = 1
	Arch_x8664Musl Arch = 2
	Arch_i686      Arch = 3
	Arch_i686Musl  Arch = 4
	Arch_armV6     Arch = 5
	Arch_armV6Musl Arch = 6
)

// String returns the enum's constant name.
func (c Arch) String() string {
	switch c {
	case Arch_noarch:
		return "noarch"
	case Arch_x8664:
		return "x8664"
	case Arch_x8664Musl:
		return "x8664Musl"
	case Arch_i686:
		return "i686"
	case Arch_i686Musl:
		return "i686Musl"
	case Arch_armV6:
		return "armV6"
	case Arch_armV6Musl:
		return "armV6Musl"

	default:
		return ""
	}
}

// ArchFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ArchFromString(c string) Arch {
	switch c {
	case "noarch":
		return Arch_noarch
	case "x8664":
		return Arch_x8664
	case "x8664Musl":
		return Arch_x8664Musl
	case "i686":
		return Arch_i686
	case "i686Musl":
		return Arch_i686Musl
	case "armV6":
		return Arch_armV6
	case "armV6Musl":
		return Arch_armV6Musl

	default:
		return 0
	}
}

type Arch_List struct{ capnp.List }

func NewArch_List(s *capnp.Segment, sz int32) (Arch_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Arch_List{l.List}, err
}

func (l Arch_List) At(i int) Arch {
	ul := capnp.UInt16List{List: l.List}
	return Arch(ul.At(i))
}

func (l Arch_List) Set(i int, v Arch) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type GithubEvent struct{ capnp.Struct }
type GithubEvent_commit GithubEvent
type GithubEvent_pullRequest GithubEvent
type GithubEvent_issue GithubEvent
type GithubEvent_Which uint16

const (
	GithubEvent_Which_commit      GithubEvent_Which = 0
	GithubEvent_Which_pullRequest GithubEvent_Which = 1
	GithubEvent_Which_issue       GithubEvent_Which = 2
)

func (w GithubEvent_Which) String() string {
	const s = "commitpullRequestissue"
	switch w {
	case GithubEvent_Which_commit:
		return s[0:6]
	case GithubEvent_Which_pullRequest:
		return s[6:17]
	case GithubEvent_Which_issue:
		return s[17:22]

	}
	return "GithubEvent_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// GithubEvent_TypeID is the unique identifier for the type GithubEvent.
const GithubEvent_TypeID = 0x992b0cc20a124b84

func NewGithubEvent(s *capnp.Segment) (GithubEvent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return GithubEvent{st}, err
}

func NewRootGithubEvent(s *capnp.Segment) (GithubEvent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return GithubEvent{st}, err
}

func ReadRootGithubEvent(msg *capnp.Message) (GithubEvent, error) {
	root, err := msg.RootPtr()
	return GithubEvent{root.Struct()}, err
}

func (s GithubEvent) String() string {
	str, _ := text.Marshal(0x992b0cc20a124b84, s.Struct)
	return str
}

func (s GithubEvent) Which() GithubEvent_Which {
	return GithubEvent_Which(s.Struct.Uint16(0))
}
func (s GithubEvent) Who() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s GithubEvent) HasWho() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s GithubEvent) WhoBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s GithubEvent) SetWho(v string) error {
	return s.Struct.SetText(0, v)
}

func (s GithubEvent) Commit() GithubEvent_commit { return GithubEvent_commit(s) }

func (s GithubEvent) SetCommit() {
	s.Struct.SetUint16(0, 0)
}

func (s GithubEvent_commit) Hash() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s GithubEvent_commit) HasHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s GithubEvent_commit) HashBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s GithubEvent_commit) SetHash(v string) error {
	return s.Struct.SetText(1, v)
}

func (s GithubEvent_commit) Branch() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s GithubEvent_commit) HasBranch() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s GithubEvent_commit) BranchBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s GithubEvent_commit) SetBranch(v string) error {
	return s.Struct.SetText(2, v)
}

func (s GithubEvent_commit) Msg() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s GithubEvent_commit) HasMsg() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s GithubEvent_commit) MsgBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s GithubEvent_commit) SetMsg(v string) error {
	return s.Struct.SetText(3, v)
}

func (s GithubEvent) PullRequest() GithubEvent_pullRequest { return GithubEvent_pullRequest(s) }

func (s GithubEvent) SetPullRequest() {
	s.Struct.SetUint16(0, 1)
}

func (s GithubEvent_pullRequest) Number() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s GithubEvent_pullRequest) SetNumber(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s GithubEvent_pullRequest) Msg() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s GithubEvent_pullRequest) HasMsg() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s GithubEvent_pullRequest) MsgBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s GithubEvent_pullRequest) SetMsg(v string) error {
	return s.Struct.SetText(1, v)
}

func (s GithubEvent_pullRequest) Action() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s GithubEvent_pullRequest) HasAction() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s GithubEvent_pullRequest) ActionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s GithubEvent_pullRequest) SetAction(v string) error {
	return s.Struct.SetText(2, v)
}

func (s GithubEvent) Issue() GithubEvent_issue { return GithubEvent_issue(s) }

func (s GithubEvent) SetIssue() {
	s.Struct.SetUint16(0, 2)
}

func (s GithubEvent_issue) Number() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s GithubEvent_issue) SetNumber(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s GithubEvent_issue) Msg() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s GithubEvent_issue) HasMsg() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s GithubEvent_issue) MsgBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s GithubEvent_issue) SetMsg(v string) error {
	return s.Struct.SetText(1, v)
}

func (s GithubEvent_issue) Action() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s GithubEvent_issue) HasAction() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s GithubEvent_issue) ActionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s GithubEvent_issue) SetAction(v string) error {
	return s.Struct.SetText(2, v)
}

// GithubEvent_List is a list of GithubEvent.
type GithubEvent_List struct{ capnp.List }

// NewGithubEvent creates a new list of GithubEvent.
func NewGithubEvent_List(s *capnp.Segment, sz int32) (GithubEvent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return GithubEvent_List{l}, err
}

func (s GithubEvent_List) At(i int) GithubEvent { return GithubEvent{s.List.Struct(i)} }

func (s GithubEvent_List) Set(i int, v GithubEvent) error { return s.List.SetStruct(i, v.Struct) }

func (s GithubEvent_List) String() string {
	str, _ := text.MarshalList(0x992b0cc20a124b84, s.List)
	return str
}

// GithubEvent_Promise is a wrapper for a GithubEvent promised by a client call.
type GithubEvent_Promise struct{ *capnp.Pipeline }

func (p GithubEvent_Promise) Struct() (GithubEvent, error) {
	s, err := p.Pipeline.Struct()
	return GithubEvent{s}, err
}

func (p GithubEvent_Promise) Commit() GithubEvent_commit_Promise {
	return GithubEvent_commit_Promise{p.Pipeline}
}

// GithubEvent_commit_Promise is a wrapper for a GithubEvent_commit promised by a client call.
type GithubEvent_commit_Promise struct{ *capnp.Pipeline }

func (p GithubEvent_commit_Promise) Struct() (GithubEvent_commit, error) {
	s, err := p.Pipeline.Struct()
	return GithubEvent_commit{s}, err
}

func (p GithubEvent_Promise) PullRequest() GithubEvent_pullRequest_Promise {
	return GithubEvent_pullRequest_Promise{p.Pipeline}
}

// GithubEvent_pullRequest_Promise is a wrapper for a GithubEvent_pullRequest promised by a client call.
type GithubEvent_pullRequest_Promise struct{ *capnp.Pipeline }

func (p GithubEvent_pullRequest_Promise) Struct() (GithubEvent_pullRequest, error) {
	s, err := p.Pipeline.Struct()
	return GithubEvent_pullRequest{s}, err
}

func (p GithubEvent_Promise) Issue() GithubEvent_issue_Promise {
	return GithubEvent_issue_Promise{p.Pipeline}
}

// GithubEvent_issue_Promise is a wrapper for a GithubEvent_issue promised by a client call.
type GithubEvent_issue_Promise struct{ *capnp.Pipeline }

func (p GithubEvent_issue_Promise) Struct() (GithubEvent_issue, error) {
	s, err := p.Pipeline.Struct()
	return GithubEvent_issue{s}, err
}

type Results uint16

// Results_TypeID is the unique identifier for the type Results.
const Results_TypeID = 0xb28d687bb0cb1f6b

// Values of Results.
const (
	Results_ok     Results = 0
	Results_err    Results = 1
	Results_reject Results = 2
)

// String returns the enum's constant name.
func (c Results) String() string {
	switch c {
	case Results_ok:
		return "ok"
	case Results_err:
		return "err"
	case Results_reject:
		return "reject"

	default:
		return ""
	}
}

// ResultsFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ResultsFromString(c string) Results {
	switch c {
	case "ok":
		return Results_ok
	case "err":
		return Results_err
	case "reject":
		return Results_reject

	default:
		return 0
	}
}

type Results_List struct{ capnp.List }

func NewResults_List(s *capnp.Segment, sz int32) (Results_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Results_List{l.List}, err
}

func (l Results_List) At(i int) Results {
	ul := capnp.UInt16List{List: l.List}
	return Results(ul.At(i))
}

func (l Results_List) Set(i int, v Results) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type BuildType uint16

// BuildType_TypeID is the unique identifier for the type BuildType.
const BuildType_TypeID = 0xb8a5ce903391283e

// Values of BuildType.
const (
	BuildType_bulk       BuildType = 0
	BuildType_individual BuildType = 1
)

// String returns the enum's constant name.
func (c BuildType) String() string {
	switch c {
	case BuildType_bulk:
		return "bulk"
	case BuildType_individual:
		return "individual"

	default:
		return ""
	}
}

// BuildTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func BuildTypeFromString(c string) BuildType {
	switch c {
	case "bulk":
		return BuildType_bulk
	case "individual":
		return BuildType_individual

	default:
		return 0
	}
}

type BuildType_List struct{ capnp.List }

func NewBuildType_List(s *capnp.Segment, sz int32) (BuildType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return BuildType_List{l.List}, err
}

func (l BuildType_List) At(i int) BuildType {
	ul := capnp.UInt16List{List: l.List}
	return BuildType(ul.At(i))
}

func (l BuildType_List) Set(i int, v BuildType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Logger struct{ Client capnp.Client }

// Logger_TypeID is the unique identifier for the type Logger.
const Logger_TypeID = 0xced160c65625ebcc

func (c Logger) Append(ctx context.Context, params func(Logger_append_Params) error, opts ...capnp.CallOption) Logger_append_Results_Promise {
	if c.Client == nil {
		return Logger_append_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xced160c65625ebcc,
			MethodID:      0,
			InterfaceName: "basic.capnp:Logger",
			MethodName:    "append",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Logger_append_Params{Struct: s}) }
	}
	return Logger_append_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Logger_Server interface {
	Append(Logger_append) error
}

func Logger_ServerToClient(s Logger_Server) Logger {
	c, _ := s.(server.Closer)
	return Logger{Client: server.New(Logger_Methods(nil, s), c)}
}

func Logger_Methods(methods []server.Method, s Logger_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xced160c65625ebcc,
			MethodID:      0,
			InterfaceName: "basic.capnp:Logger",
			MethodName:    "append",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Logger_append{c, opts, Logger_append_Params{Struct: p}, Logger_append_Results{Struct: r}}
			return s.Append(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	return methods
}

// Logger_append holds the arguments for a server call to Logger.append.
type Logger_append struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Logger_append_Params
	Results Logger_append_Results
}

type Logger_append_Params struct{ capnp.Struct }

// Logger_append_Params_TypeID is the unique identifier for the type Logger_append_Params.
const Logger_append_Params_TypeID = 0xc4db11d8bf7d0e78

func NewLogger_append_Params(s *capnp.Segment) (Logger_append_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Logger_append_Params{st}, err
}

func NewRootLogger_append_Params(s *capnp.Segment) (Logger_append_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Logger_append_Params{st}, err
}

func ReadRootLogger_append_Params(msg *capnp.Message) (Logger_append_Params, error) {
	root, err := msg.RootPtr()
	return Logger_append_Params{root.Struct()}, err
}

func (s Logger_append_Params) String() string {
	str, _ := text.Marshal(0xc4db11d8bf7d0e78, s.Struct)
	return str
}

func (s Logger_append_Params) Logs() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Logger_append_Params) HasLogs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Logger_append_Params) SetLogs(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Logger_append_Params_List is a list of Logger_append_Params.
type Logger_append_Params_List struct{ capnp.List }

// NewLogger_append_Params creates a new list of Logger_append_Params.
func NewLogger_append_Params_List(s *capnp.Segment, sz int32) (Logger_append_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Logger_append_Params_List{l}, err
}

func (s Logger_append_Params_List) At(i int) Logger_append_Params {
	return Logger_append_Params{s.List.Struct(i)}
}

func (s Logger_append_Params_List) Set(i int, v Logger_append_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Logger_append_Params_List) String() string {
	str, _ := text.MarshalList(0xc4db11d8bf7d0e78, s.List)
	return str
}

// Logger_append_Params_Promise is a wrapper for a Logger_append_Params promised by a client call.
type Logger_append_Params_Promise struct{ *capnp.Pipeline }

func (p Logger_append_Params_Promise) Struct() (Logger_append_Params, error) {
	s, err := p.Pipeline.Struct()
	return Logger_append_Params{s}, err
}

type Logger_append_Results struct{ capnp.Struct }

// Logger_append_Results_TypeID is the unique identifier for the type Logger_append_Results.
const Logger_append_Results_TypeID = 0xcaa77452f9c37eeb

func NewLogger_append_Results(s *capnp.Segment) (Logger_append_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Logger_append_Results{st}, err
}

func NewRootLogger_append_Results(s *capnp.Segment) (Logger_append_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Logger_append_Results{st}, err
}

func ReadRootLogger_append_Results(msg *capnp.Message) (Logger_append_Results, error) {
	root, err := msg.RootPtr()
	return Logger_append_Results{root.Struct()}, err
}

func (s Logger_append_Results) String() string {
	str, _ := text.Marshal(0xcaa77452f9c37eeb, s.Struct)
	return str
}

// Logger_append_Results_List is a list of Logger_append_Results.
type Logger_append_Results_List struct{ capnp.List }

// NewLogger_append_Results creates a new list of Logger_append_Results.
func NewLogger_append_Results_List(s *capnp.Segment, sz int32) (Logger_append_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Logger_append_Results_List{l}, err
}

func (s Logger_append_Results_List) At(i int) Logger_append_Results {
	return Logger_append_Results{s.List.Struct(i)}
}

func (s Logger_append_Results_List) Set(i int, v Logger_append_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Logger_append_Results_List) String() string {
	str, _ := text.MarshalList(0xcaa77452f9c37eeb, s.List)
	return str
}

// Logger_append_Results_Promise is a wrapper for a Logger_append_Results promised by a client call.
type Logger_append_Results_Promise struct{ *capnp.Pipeline }

func (p Logger_append_Results_Promise) Struct() (Logger_append_Results, error) {
	s, err := p.Pipeline.Struct()
	return Logger_append_Results{s}, err
}

type IrcBot struct{ Client capnp.Client }

// IrcBot_TypeID is the unique identifier for the type IrcBot.
const IrcBot_TypeID = 0xbb6513902c830e39

func (c IrcBot) NoteGhEvent(ctx context.Context, params func(IrcBot_noteGhEvent_Params) error, opts ...capnp.CallOption) IrcBot_noteGhEvent_Results_Promise {
	if c.Client == nil {
		return IrcBot_noteGhEvent_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xbb6513902c830e39,
			MethodID:      0,
			InterfaceName: "basic.capnp:IrcBot",
			MethodName:    "noteGhEvent",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(IrcBot_noteGhEvent_Params{Struct: s}) }
	}
	return IrcBot_noteGhEvent_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type IrcBot_Server interface {
	NoteGhEvent(IrcBot_noteGhEvent) error
}

func IrcBot_ServerToClient(s IrcBot_Server) IrcBot {
	c, _ := s.(server.Closer)
	return IrcBot{Client: server.New(IrcBot_Methods(nil, s), c)}
}

func IrcBot_Methods(methods []server.Method, s IrcBot_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbb6513902c830e39,
			MethodID:      0,
			InterfaceName: "basic.capnp:IrcBot",
			MethodName:    "noteGhEvent",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := IrcBot_noteGhEvent{c, opts, IrcBot_noteGhEvent_Params{Struct: p}, IrcBot_noteGhEvent_Results{Struct: r}}
			return s.NoteGhEvent(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	return methods
}

// IrcBot_noteGhEvent holds the arguments for a server call to IrcBot.noteGhEvent.
type IrcBot_noteGhEvent struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  IrcBot_noteGhEvent_Params
	Results IrcBot_noteGhEvent_Results
}

type IrcBot_noteGhEvent_Params struct{ capnp.Struct }

// IrcBot_noteGhEvent_Params_TypeID is the unique identifier for the type IrcBot_noteGhEvent_Params.
const IrcBot_noteGhEvent_Params_TypeID = 0xa5eec3de87bdd251

func NewIrcBot_noteGhEvent_Params(s *capnp.Segment) (IrcBot_noteGhEvent_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IrcBot_noteGhEvent_Params{st}, err
}

func NewRootIrcBot_noteGhEvent_Params(s *capnp.Segment) (IrcBot_noteGhEvent_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IrcBot_noteGhEvent_Params{st}, err
}

func ReadRootIrcBot_noteGhEvent_Params(msg *capnp.Message) (IrcBot_noteGhEvent_Params, error) {
	root, err := msg.RootPtr()
	return IrcBot_noteGhEvent_Params{root.Struct()}, err
}

func (s IrcBot_noteGhEvent_Params) String() string {
	str, _ := text.Marshal(0xa5eec3de87bdd251, s.Struct)
	return str
}

func (s IrcBot_noteGhEvent_Params) Gh() (GithubEvent, error) {
	p, err := s.Struct.Ptr(0)
	return GithubEvent{Struct: p.Struct()}, err
}

func (s IrcBot_noteGhEvent_Params) HasGh() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IrcBot_noteGhEvent_Params) SetGh(v GithubEvent) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGh sets the gh field to a newly
// allocated GithubEvent struct, preferring placement in s's segment.
func (s IrcBot_noteGhEvent_Params) NewGh() (GithubEvent, error) {
	ss, err := NewGithubEvent(s.Struct.Segment())
	if err != nil {
		return GithubEvent{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// IrcBot_noteGhEvent_Params_List is a list of IrcBot_noteGhEvent_Params.
type IrcBot_noteGhEvent_Params_List struct{ capnp.List }

// NewIrcBot_noteGhEvent_Params creates a new list of IrcBot_noteGhEvent_Params.
func NewIrcBot_noteGhEvent_Params_List(s *capnp.Segment, sz int32) (IrcBot_noteGhEvent_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IrcBot_noteGhEvent_Params_List{l}, err
}

func (s IrcBot_noteGhEvent_Params_List) At(i int) IrcBot_noteGhEvent_Params {
	return IrcBot_noteGhEvent_Params{s.List.Struct(i)}
}

func (s IrcBot_noteGhEvent_Params_List) Set(i int, v IrcBot_noteGhEvent_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IrcBot_noteGhEvent_Params_List) String() string {
	str, _ := text.MarshalList(0xa5eec3de87bdd251, s.List)
	return str
}

// IrcBot_noteGhEvent_Params_Promise is a wrapper for a IrcBot_noteGhEvent_Params promised by a client call.
type IrcBot_noteGhEvent_Params_Promise struct{ *capnp.Pipeline }

func (p IrcBot_noteGhEvent_Params_Promise) Struct() (IrcBot_noteGhEvent_Params, error) {
	s, err := p.Pipeline.Struct()
	return IrcBot_noteGhEvent_Params{s}, err
}

func (p IrcBot_noteGhEvent_Params_Promise) Gh() GithubEvent_Promise {
	return GithubEvent_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type IrcBot_noteGhEvent_Results struct{ capnp.Struct }

// IrcBot_noteGhEvent_Results_TypeID is the unique identifier for the type IrcBot_noteGhEvent_Results.
const IrcBot_noteGhEvent_Results_TypeID = 0xf5bdbbc1d36794d7

func NewIrcBot_noteGhEvent_Results(s *capnp.Segment) (IrcBot_noteGhEvent_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IrcBot_noteGhEvent_Results{st}, err
}

func NewRootIrcBot_noteGhEvent_Results(s *capnp.Segment) (IrcBot_noteGhEvent_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IrcBot_noteGhEvent_Results{st}, err
}

func ReadRootIrcBot_noteGhEvent_Results(msg *capnp.Message) (IrcBot_noteGhEvent_Results, error) {
	root, err := msg.RootPtr()
	return IrcBot_noteGhEvent_Results{root.Struct()}, err
}

func (s IrcBot_noteGhEvent_Results) String() string {
	str, _ := text.Marshal(0xf5bdbbc1d36794d7, s.Struct)
	return str
}

// IrcBot_noteGhEvent_Results_List is a list of IrcBot_noteGhEvent_Results.
type IrcBot_noteGhEvent_Results_List struct{ capnp.List }

// NewIrcBot_noteGhEvent_Results creates a new list of IrcBot_noteGhEvent_Results.
func NewIrcBot_noteGhEvent_Results_List(s *capnp.Segment, sz int32) (IrcBot_noteGhEvent_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return IrcBot_noteGhEvent_Results_List{l}, err
}

func (s IrcBot_noteGhEvent_Results_List) At(i int) IrcBot_noteGhEvent_Results {
	return IrcBot_noteGhEvent_Results{s.List.Struct(i)}
}

func (s IrcBot_noteGhEvent_Results_List) Set(i int, v IrcBot_noteGhEvent_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IrcBot_noteGhEvent_Results_List) String() string {
	str, _ := text.MarshalList(0xf5bdbbc1d36794d7, s.List)
	return str
}

// IrcBot_noteGhEvent_Results_Promise is a wrapper for a IrcBot_noteGhEvent_Results promised by a client call.
type IrcBot_noteGhEvent_Results_Promise struct{ *capnp.Pipeline }

func (p IrcBot_noteGhEvent_Results_Promise) Struct() (IrcBot_noteGhEvent_Results, error) {
	s, err := p.Pipeline.Struct()
	return IrcBot_noteGhEvent_Results{s}, err
}

type Builder struct{ Client capnp.Client }

// Builder_TypeID is the unique identifier for the type Builder.
const Builder_TypeID = 0x8e22cadf94183d27

func (c Builder) Capabilities(ctx context.Context, params func(Builder_capabilities_Params) error, opts ...capnp.CallOption) Builder_capabilities_Results_Promise {
	if c.Client == nil {
		return Builder_capabilities_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x8e22cadf94183d27,
			MethodID:      0,
			InterfaceName: "basic.capnp:Builder",
			MethodName:    "capabilities",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Builder_capabilities_Params{Struct: s}) }
	}
	return Builder_capabilities_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Builder) Build(ctx context.Context, params func(Builder_build_Params) error, opts ...capnp.CallOption) Builder_build_Results_Promise {
	if c.Client == nil {
		return Builder_build_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x8e22cadf94183d27,
			MethodID:      1,
			InterfaceName: "basic.capnp:Builder",
			MethodName:    "build",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Builder_build_Params{Struct: s}) }
	}
	return Builder_build_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Builder) Keepalive(ctx context.Context, params func(Builder_keepalive_Params) error, opts ...capnp.CallOption) Builder_keepalive_Results_Promise {
	if c.Client == nil {
		return Builder_keepalive_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x8e22cadf94183d27,
			MethodID:      2,
			InterfaceName: "basic.capnp:Builder",
			MethodName:    "keepalive",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Builder_keepalive_Params{Struct: s}) }
	}
	return Builder_keepalive_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Builder_Server interface {
	Capabilities(Builder_capabilities) error

	Build(Builder_build) error

	Keepalive(Builder_keepalive) error
}

func Builder_ServerToClient(s Builder_Server) Builder {
	c, _ := s.(server.Closer)
	return Builder{Client: server.New(Builder_Methods(nil, s), c)}
}

func Builder_Methods(methods []server.Method, s Builder_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8e22cadf94183d27,
			MethodID:      0,
			InterfaceName: "basic.capnp:Builder",
			MethodName:    "capabilities",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Builder_capabilities{c, opts, Builder_capabilities_Params{Struct: p}, Builder_capabilities_Results{Struct: r}}
			return s.Capabilities(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8e22cadf94183d27,
			MethodID:      1,
			InterfaceName: "basic.capnp:Builder",
			MethodName:    "build",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Builder_build{c, opts, Builder_build_Params{Struct: p}, Builder_build_Results{Struct: r}}
			return s.Build(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8e22cadf94183d27,
			MethodID:      2,
			InterfaceName: "basic.capnp:Builder",
			MethodName:    "keepalive",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Builder_keepalive{c, opts, Builder_keepalive_Params{Struct: p}, Builder_keepalive_Results{Struct: r}}
			return s.Keepalive(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	return methods
}

// Builder_capabilities holds the arguments for a server call to Builder.capabilities.
type Builder_capabilities struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Builder_capabilities_Params
	Results Builder_capabilities_Results
}

// Builder_build holds the arguments for a server call to Builder.build.
type Builder_build struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Builder_build_Params
	Results Builder_build_Results
}

// Builder_keepalive holds the arguments for a server call to Builder.keepalive.
type Builder_keepalive struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Builder_keepalive_Params
	Results Builder_keepalive_Results
}

type Builder_What struct{ capnp.Struct }

// Builder_What_TypeID is the unique identifier for the type Builder_What.
const Builder_What_TypeID = 0xaf9eac8061af076b

func NewBuilder_What(s *capnp.Segment) (Builder_What, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Builder_What{st}, err
}

func NewRootBuilder_What(s *capnp.Segment) (Builder_What, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Builder_What{st}, err
}

func ReadRootBuilder_What(msg *capnp.Message) (Builder_What, error) {
	root, err := msg.RootPtr()
	return Builder_What{root.Struct()}, err
}

func (s Builder_What) String() string {
	str, _ := text.Marshal(0xaf9eac8061af076b, s.Struct)
	return str
}

func (s Builder_What) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Builder_What) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Builder_What) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Builder_What) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Builder_What) Ver() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Builder_What) HasVer() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Builder_What) VerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Builder_What) SetVer(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Builder_What) Arch() Arch {
	return Arch(s.Struct.Uint16(0))
}

func (s Builder_What) SetArch(v Arch) {
	s.Struct.SetUint16(0, uint16(v))
}

// Builder_What_List is a list of Builder_What.
type Builder_What_List struct{ capnp.List }

// NewBuilder_What creates a new list of Builder_What.
func NewBuilder_What_List(s *capnp.Segment, sz int32) (Builder_What_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Builder_What_List{l}, err
}

func (s Builder_What_List) At(i int) Builder_What { return Builder_What{s.List.Struct(i)} }

func (s Builder_What_List) Set(i int, v Builder_What) error { return s.List.SetStruct(i, v.Struct) }

func (s Builder_What_List) String() string {
	str, _ := text.MarshalList(0xaf9eac8061af076b, s.List)
	return str
}

// Builder_What_Promise is a wrapper for a Builder_What promised by a client call.
type Builder_What_Promise struct{ *capnp.Pipeline }

func (p Builder_What_Promise) Struct() (Builder_What, error) {
	s, err := p.Pipeline.Struct()
	return Builder_What{s}, err
}

type Builder_Capability struct{ capnp.Struct }

// Builder_Capability_TypeID is the unique identifier for the type Builder_Capability.
const Builder_Capability_TypeID = 0xf64adeda9400745f

func NewBuilder_Capability(s *capnp.Segment) (Builder_Capability, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Builder_Capability{st}, err
}

func NewRootBuilder_Capability(s *capnp.Segment) (Builder_Capability, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Builder_Capability{st}, err
}

func ReadRootBuilder_Capability(msg *capnp.Message) (Builder_Capability, error) {
	root, err := msg.RootPtr()
	return Builder_Capability{root.Struct()}, err
}

func (s Builder_Capability) String() string {
	str, _ := text.Marshal(0xf64adeda9400745f, s.Struct)
	return str
}

func (s Builder_Capability) Arch() Arch {
	return Arch(s.Struct.Uint16(0))
}

func (s Builder_Capability) SetArch(v Arch) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Builder_Capability) Type() BuildType {
	return BuildType(s.Struct.Uint16(2) ^ 1)
}

func (s Builder_Capability) SetType(v BuildType) {
	s.Struct.SetUint16(2, uint16(v)^1)
}

func (s Builder_Capability) Hostarch() Arch {
	return Arch(s.Struct.Uint16(4))
}

func (s Builder_Capability) SetHostarch(v Arch) {
	s.Struct.SetUint16(4, uint16(v))
}

// Builder_Capability_List is a list of Builder_Capability.
type Builder_Capability_List struct{ capnp.List }

// NewBuilder_Capability creates a new list of Builder_Capability.
func NewBuilder_Capability_List(s *capnp.Segment, sz int32) (Builder_Capability_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Builder_Capability_List{l}, err
}

func (s Builder_Capability_List) At(i int) Builder_Capability {
	return Builder_Capability{s.List.Struct(i)}
}

func (s Builder_Capability_List) Set(i int, v Builder_Capability) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Builder_Capability_List) String() string {
	str, _ := text.MarshalList(0xf64adeda9400745f, s.List)
	return str
}

// Builder_Capability_Promise is a wrapper for a Builder_Capability promised by a client call.
type Builder_Capability_Promise struct{ *capnp.Pipeline }

func (p Builder_Capability_Promise) Struct() (Builder_Capability, error) {
	s, err := p.Pipeline.Struct()
	return Builder_Capability{s}, err
}

type Builder_Opts struct{ capnp.Struct }

// Builder_Opts_TypeID is the unique identifier for the type Builder_Opts.
const Builder_Opts_TypeID = 0xf85627eda839d41a

func NewBuilder_Opts(s *capnp.Segment) (Builder_Opts, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Builder_Opts{st}, err
}

func NewRootBuilder_Opts(s *capnp.Segment) (Builder_Opts, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Builder_Opts{st}, err
}

func ReadRootBuilder_Opts(msg *capnp.Message) (Builder_Opts, error) {
	root, err := msg.RootPtr()
	return Builder_Opts{root.Struct()}, err
}

func (s Builder_Opts) String() string {
	str, _ := text.Marshal(0xf85627eda839d41a, s.Struct)
	return str
}

func (s Builder_Opts) IgnorePkgSpec() bool {
	return s.Struct.Bit(0)
}

func (s Builder_Opts) SetIgnorePkgSpec(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Builder_Opts) Log() Logger {
	p, _ := s.Struct.Ptr(0)
	return Logger{Client: p.Interface().Client()}
}

func (s Builder_Opts) HasLog() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Builder_Opts) SetLog(v Logger) error {
	if v.Client == nil {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Builder_Opts_List is a list of Builder_Opts.
type Builder_Opts_List struct{ capnp.List }

// NewBuilder_Opts creates a new list of Builder_Opts.
func NewBuilder_Opts_List(s *capnp.Segment, sz int32) (Builder_Opts_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Builder_Opts_List{l}, err
}

func (s Builder_Opts_List) At(i int) Builder_Opts { return Builder_Opts{s.List.Struct(i)} }

func (s Builder_Opts_List) Set(i int, v Builder_Opts) error { return s.List.SetStruct(i, v.Struct) }

func (s Builder_Opts_List) String() string {
	str, _ := text.MarshalList(0xf85627eda839d41a, s.List)
	return str
}

// Builder_Opts_Promise is a wrapper for a Builder_Opts promised by a client call.
type Builder_Opts_Promise struct{ *capnp.Pipeline }

func (p Builder_Opts_Promise) Struct() (Builder_Opts, error) {
	s, err := p.Pipeline.Struct()
	return Builder_Opts{s}, err
}

func (p Builder_Opts_Promise) Log() Logger {
	return Logger{Client: p.Pipeline.GetPipeline(0).Client()}
}

type Builder_capabilities_Params struct{ capnp.Struct }

// Builder_capabilities_Params_TypeID is the unique identifier for the type Builder_capabilities_Params.
const Builder_capabilities_Params_TypeID = 0x9fe0e82ce7dbd61e

func NewBuilder_capabilities_Params(s *capnp.Segment) (Builder_capabilities_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Builder_capabilities_Params{st}, err
}

func NewRootBuilder_capabilities_Params(s *capnp.Segment) (Builder_capabilities_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Builder_capabilities_Params{st}, err
}

func ReadRootBuilder_capabilities_Params(msg *capnp.Message) (Builder_capabilities_Params, error) {
	root, err := msg.RootPtr()
	return Builder_capabilities_Params{root.Struct()}, err
}

func (s Builder_capabilities_Params) String() string {
	str, _ := text.Marshal(0x9fe0e82ce7dbd61e, s.Struct)
	return str
}

// Builder_capabilities_Params_List is a list of Builder_capabilities_Params.
type Builder_capabilities_Params_List struct{ capnp.List }

// NewBuilder_capabilities_Params creates a new list of Builder_capabilities_Params.
func NewBuilder_capabilities_Params_List(s *capnp.Segment, sz int32) (Builder_capabilities_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Builder_capabilities_Params_List{l}, err
}

func (s Builder_capabilities_Params_List) At(i int) Builder_capabilities_Params {
	return Builder_capabilities_Params{s.List.Struct(i)}
}

func (s Builder_capabilities_Params_List) Set(i int, v Builder_capabilities_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Builder_capabilities_Params_List) String() string {
	str, _ := text.MarshalList(0x9fe0e82ce7dbd61e, s.List)
	return str
}

// Builder_capabilities_Params_Promise is a wrapper for a Builder_capabilities_Params promised by a client call.
type Builder_capabilities_Params_Promise struct{ *capnp.Pipeline }

func (p Builder_capabilities_Params_Promise) Struct() (Builder_capabilities_Params, error) {
	s, err := p.Pipeline.Struct()
	return Builder_capabilities_Params{s}, err
}

type Builder_capabilities_Results struct{ capnp.Struct }

// Builder_capabilities_Results_TypeID is the unique identifier for the type Builder_capabilities_Results.
const Builder_capabilities_Results_TypeID = 0x985efa717f498039

func NewBuilder_capabilities_Results(s *capnp.Segment) (Builder_capabilities_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Builder_capabilities_Results{st}, err
}

func NewRootBuilder_capabilities_Results(s *capnp.Segment) (Builder_capabilities_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Builder_capabilities_Results{st}, err
}

func ReadRootBuilder_capabilities_Results(msg *capnp.Message) (Builder_capabilities_Results, error) {
	root, err := msg.RootPtr()
	return Builder_capabilities_Results{root.Struct()}, err
}

func (s Builder_capabilities_Results) String() string {
	str, _ := text.Marshal(0x985efa717f498039, s.Struct)
	return str
}

func (s Builder_capabilities_Results) Result() (Builder_Capability_List, error) {
	p, err := s.Struct.Ptr(0)
	return Builder_Capability_List{List: p.List()}, err
}

func (s Builder_capabilities_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Builder_capabilities_Results) SetResult(v Builder_Capability_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewResult sets the result field to a newly
// allocated Builder_Capability_List, preferring placement in s's segment.
func (s Builder_capabilities_Results) NewResult(n int32) (Builder_Capability_List, error) {
	l, err := NewBuilder_Capability_List(s.Struct.Segment(), n)
	if err != nil {
		return Builder_Capability_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Builder_capabilities_Results_List is a list of Builder_capabilities_Results.
type Builder_capabilities_Results_List struct{ capnp.List }

// NewBuilder_capabilities_Results creates a new list of Builder_capabilities_Results.
func NewBuilder_capabilities_Results_List(s *capnp.Segment, sz int32) (Builder_capabilities_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Builder_capabilities_Results_List{l}, err
}

func (s Builder_capabilities_Results_List) At(i int) Builder_capabilities_Results {
	return Builder_capabilities_Results{s.List.Struct(i)}
}

func (s Builder_capabilities_Results_List) Set(i int, v Builder_capabilities_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Builder_capabilities_Results_List) String() string {
	str, _ := text.MarshalList(0x985efa717f498039, s.List)
	return str
}

// Builder_capabilities_Results_Promise is a wrapper for a Builder_capabilities_Results promised by a client call.
type Builder_capabilities_Results_Promise struct{ *capnp.Pipeline }

func (p Builder_capabilities_Results_Promise) Struct() (Builder_capabilities_Results, error) {
	s, err := p.Pipeline.Struct()
	return Builder_capabilities_Results{s}, err
}

type Builder_build_Params struct{ capnp.Struct }

// Builder_build_Params_TypeID is the unique identifier for the type Builder_build_Params.
const Builder_build_Params_TypeID = 0xe95aba507536661c

func NewBuilder_build_Params(s *capnp.Segment) (Builder_build_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Builder_build_Params{st}, err
}

func NewRootBuilder_build_Params(s *capnp.Segment) (Builder_build_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Builder_build_Params{st}, err
}

func ReadRootBuilder_build_Params(msg *capnp.Message) (Builder_build_Params, error) {
	root, err := msg.RootPtr()
	return Builder_build_Params{root.Struct()}, err
}

func (s Builder_build_Params) String() string {
	str, _ := text.Marshal(0xe95aba507536661c, s.Struct)
	return str
}

func (s Builder_build_Params) What() (Builder_What, error) {
	p, err := s.Struct.Ptr(0)
	return Builder_What{Struct: p.Struct()}, err
}

func (s Builder_build_Params) HasWhat() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Builder_build_Params) SetWhat(v Builder_What) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewWhat sets the what field to a newly
// allocated Builder_What struct, preferring placement in s's segment.
func (s Builder_build_Params) NewWhat() (Builder_What, error) {
	ss, err := NewBuilder_What(s.Struct.Segment())
	if err != nil {
		return Builder_What{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Builder_build_Params) Options() (Builder_Opts, error) {
	p, err := s.Struct.Ptr(1)
	return Builder_Opts{Struct: p.Struct()}, err
}

func (s Builder_build_Params) HasOptions() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Builder_build_Params) SetOptions(v Builder_Opts) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewOptions sets the options field to a newly
// allocated Builder_Opts struct, preferring placement in s's segment.
func (s Builder_build_Params) NewOptions() (Builder_Opts, error) {
	ss, err := NewBuilder_Opts(s.Struct.Segment())
	if err != nil {
		return Builder_Opts{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Builder_build_Params_List is a list of Builder_build_Params.
type Builder_build_Params_List struct{ capnp.List }

// NewBuilder_build_Params creates a new list of Builder_build_Params.
func NewBuilder_build_Params_List(s *capnp.Segment, sz int32) (Builder_build_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Builder_build_Params_List{l}, err
}

func (s Builder_build_Params_List) At(i int) Builder_build_Params {
	return Builder_build_Params{s.List.Struct(i)}
}

func (s Builder_build_Params_List) Set(i int, v Builder_build_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Builder_build_Params_List) String() string {
	str, _ := text.MarshalList(0xe95aba507536661c, s.List)
	return str
}

// Builder_build_Params_Promise is a wrapper for a Builder_build_Params promised by a client call.
type Builder_build_Params_Promise struct{ *capnp.Pipeline }

func (p Builder_build_Params_Promise) Struct() (Builder_build_Params, error) {
	s, err := p.Pipeline.Struct()
	return Builder_build_Params{s}, err
}

func (p Builder_build_Params_Promise) What() Builder_What_Promise {
	return Builder_What_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Builder_build_Params_Promise) Options() Builder_Opts_Promise {
	return Builder_Opts_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Builder_build_Results struct{ capnp.Struct }

// Builder_build_Results_TypeID is the unique identifier for the type Builder_build_Results.
const Builder_build_Results_TypeID = 0xd84b85756d95b69f

func NewBuilder_build_Results(s *capnp.Segment) (Builder_build_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Builder_build_Results{st}, err
}

func NewRootBuilder_build_Results(s *capnp.Segment) (Builder_build_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Builder_build_Results{st}, err
}

func ReadRootBuilder_build_Results(msg *capnp.Message) (Builder_build_Results, error) {
	root, err := msg.RootPtr()
	return Builder_build_Results{root.Struct()}, err
}

func (s Builder_build_Results) String() string {
	str, _ := text.Marshal(0xd84b85756d95b69f, s.Struct)
	return str
}

func (s Builder_build_Results) Done() Results {
	return Results(s.Struct.Uint16(0))
}

func (s Builder_build_Results) SetDone(v Results) {
	s.Struct.SetUint16(0, uint16(v))
}

// Builder_build_Results_List is a list of Builder_build_Results.
type Builder_build_Results_List struct{ capnp.List }

// NewBuilder_build_Results creates a new list of Builder_build_Results.
func NewBuilder_build_Results_List(s *capnp.Segment, sz int32) (Builder_build_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Builder_build_Results_List{l}, err
}

func (s Builder_build_Results_List) At(i int) Builder_build_Results {
	return Builder_build_Results{s.List.Struct(i)}
}

func (s Builder_build_Results_List) Set(i int, v Builder_build_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Builder_build_Results_List) String() string {
	str, _ := text.MarshalList(0xd84b85756d95b69f, s.List)
	return str
}

// Builder_build_Results_Promise is a wrapper for a Builder_build_Results promised by a client call.
type Builder_build_Results_Promise struct{ *capnp.Pipeline }

func (p Builder_build_Results_Promise) Struct() (Builder_build_Results, error) {
	s, err := p.Pipeline.Struct()
	return Builder_build_Results{s}, err
}

type Builder_keepalive_Params struct{ capnp.Struct }

// Builder_keepalive_Params_TypeID is the unique identifier for the type Builder_keepalive_Params.
const Builder_keepalive_Params_TypeID = 0x94f14654078c783e

func NewBuilder_keepalive_Params(s *capnp.Segment) (Builder_keepalive_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Builder_keepalive_Params{st}, err
}

func NewRootBuilder_keepalive_Params(s *capnp.Segment) (Builder_keepalive_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Builder_keepalive_Params{st}, err
}

func ReadRootBuilder_keepalive_Params(msg *capnp.Message) (Builder_keepalive_Params, error) {
	root, err := msg.RootPtr()
	return Builder_keepalive_Params{root.Struct()}, err
}

func (s Builder_keepalive_Params) String() string {
	str, _ := text.Marshal(0x94f14654078c783e, s.Struct)
	return str
}

func (s Builder_keepalive_Params) I() uint8 {
	return s.Struct.Uint8(0)
}

func (s Builder_keepalive_Params) SetI(v uint8) {
	s.Struct.SetUint8(0, v)
}

// Builder_keepalive_Params_List is a list of Builder_keepalive_Params.
type Builder_keepalive_Params_List struct{ capnp.List }

// NewBuilder_keepalive_Params creates a new list of Builder_keepalive_Params.
func NewBuilder_keepalive_Params_List(s *capnp.Segment, sz int32) (Builder_keepalive_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Builder_keepalive_Params_List{l}, err
}

func (s Builder_keepalive_Params_List) At(i int) Builder_keepalive_Params {
	return Builder_keepalive_Params{s.List.Struct(i)}
}

func (s Builder_keepalive_Params_List) Set(i int, v Builder_keepalive_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Builder_keepalive_Params_List) String() string {
	str, _ := text.MarshalList(0x94f14654078c783e, s.List)
	return str
}

// Builder_keepalive_Params_Promise is a wrapper for a Builder_keepalive_Params promised by a client call.
type Builder_keepalive_Params_Promise struct{ *capnp.Pipeline }

func (p Builder_keepalive_Params_Promise) Struct() (Builder_keepalive_Params, error) {
	s, err := p.Pipeline.Struct()
	return Builder_keepalive_Params{s}, err
}

type Builder_keepalive_Results struct{ capnp.Struct }

// Builder_keepalive_Results_TypeID is the unique identifier for the type Builder_keepalive_Results.
const Builder_keepalive_Results_TypeID = 0xb17438a7cfbdf120

func NewBuilder_keepalive_Results(s *capnp.Segment) (Builder_keepalive_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Builder_keepalive_Results{st}, err
}

func NewRootBuilder_keepalive_Results(s *capnp.Segment) (Builder_keepalive_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Builder_keepalive_Results{st}, err
}

func ReadRootBuilder_keepalive_Results(msg *capnp.Message) (Builder_keepalive_Results, error) {
	root, err := msg.RootPtr()
	return Builder_keepalive_Results{root.Struct()}, err
}

func (s Builder_keepalive_Results) String() string {
	str, _ := text.Marshal(0xb17438a7cfbdf120, s.Struct)
	return str
}

func (s Builder_keepalive_Results) I() uint8 {
	return s.Struct.Uint8(0)
}

func (s Builder_keepalive_Results) SetI(v uint8) {
	s.Struct.SetUint8(0, v)
}

// Builder_keepalive_Results_List is a list of Builder_keepalive_Results.
type Builder_keepalive_Results_List struct{ capnp.List }

// NewBuilder_keepalive_Results creates a new list of Builder_keepalive_Results.
func NewBuilder_keepalive_Results_List(s *capnp.Segment, sz int32) (Builder_keepalive_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Builder_keepalive_Results_List{l}, err
}

func (s Builder_keepalive_Results_List) At(i int) Builder_keepalive_Results {
	return Builder_keepalive_Results{s.List.Struct(i)}
}

func (s Builder_keepalive_Results_List) Set(i int, v Builder_keepalive_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Builder_keepalive_Results_List) String() string {
	str, _ := text.MarshalList(0xb17438a7cfbdf120, s.List)
	return str
}

// Builder_keepalive_Results_Promise is a wrapper for a Builder_keepalive_Results promised by a client call.
type Builder_keepalive_Results_Promise struct{ *capnp.Pipeline }

func (p Builder_keepalive_Results_Promise) Struct() (Builder_keepalive_Results, error) {
	s, err := p.Pipeline.Struct()
	return Builder_keepalive_Results{s}, err
}

const schema_902d2bfc3bbf0d43 = "x\xda\xacVml#W\x15\xbd\xf7\xcd\x8c\x9f\x1d\xec" +
	"u\xdeNV\xaa\xa2.\x86\x90\xd2\xd6\xddDM\xb6J" +
	"\x13\xa3\xd4!%\x04\xa7\x1b\xad'\xac\x96vA\xc0\xd8" +
	"~\xd8\xd3\xf8+3\xe3d#D[XV\x88\xaa\x0b" +
	"[)+\xd1Jm\xd5H\xab\x82DYZ$D\xa9" +
	"VU[D\xa5\x80\x8a\xcag\xa1RA\xfc)UU" +
	"\xa4\x80\xf8\xd8\x852\xe8=g\xc6\x93\xd8\xbb\xf0\xa3\x7f" +
	"\xac\xb1ss\xee\xbd\xe7\x9ds\xde\xdc\xfc\x922C\xc6" +
	"\xb4\xa31\x00\xa3\xaaE\xbc\x03\xeb\x8f/l~\xe0\xeb" +
	"\xa7\x80\xc5\x89w{\xe2\xb9\x0f\xfd\xfb\xa6\x91\xb3\x00\xa8" +
	"\x9fQ\xef\xd7\xcf\xa9\x14@\x7fP\xbd\x00\xe8]?}" +
	"\xcd\xc6\xef\xb7\x86\xbe\x06,\xae\xec*\xdcV7\xf5K" +
	"\xea\xad\x00\xfaA\xed%\xfd\x11\x8d\x02x\xb7\x9d|\x80" +
	"\x1e\xfb\xe8\xf6\x06\x18\x03\x88\x00\x02\xe6\xf0i-\x8d\x02" +
	"W\xcb\x02zS\xf7\xe5\xee]\xb9\xfc\xe9o\x00\x1b@" +
	"\x00\x0dE\xc1\x93\xda\x82(xF\x16|\xf9\x8e\xfd}" +
	"/\xc4oz\x08\x8c8\x86\x06\x9bS\xa9\x02\xa0\xbf\xa9" +
	"\xbd\xa0o\x8bN\xfa\xdb\xda\x1b\x80\xde{\x7f\xfd\xda\x1b" +
	"\x87\xfe\xf4\x87\xc7\xdap\xb2\xddJd\x16A\xf5\x8c\x9f" +
	"_\xfc\xca\xeb/\xfe\xf9<0=htWd\\4" +
	"2#\xa2\xd12\xbd`\xde\xf7\xedG/\xc8Q;[" +
	"jD\xa0\x7f1\xb2\xa5\x9f\x89\x88\xa7\xafF\x04\x09\xef" +
	"\xdb\xbe\xf8\xb3'&\xdd\xa7\xc2{\xbd\x9fJ\xb4\x1b\xa9" +
	"DK\xfd\xe4\xbb\x9f\xaf\x9cy\xba\x8b\xce\x1c\xdd\xd4\x0d" +
	"*\x90\x16\xe9Q@\xef\xb6\x1b\x1e<|\xf6\xe5\xf3?" +
	"\xe8*4\xe9\xd3\xba%\x0b9\xbdU0\xb5\xef\xd4\xa1" +
	"\xb3:\x7f\xb6\x8b\xf7\x1a}Xo\xc9\xc2\x15:\xaf?" +
	"\"\x9e\xbc\x93\xfb\xbe\xf0\xdc\xab\xec\xb5\x1f\x85\xb7=M" +
	"\xfb$\xefr\xbe\xb7\xeey\xf1\xd2\x92\xfb\xc4V\xbb@" +
	"\xce\xff$\xdd/\x88\xfa\xe9[\xd7\x1d\xff\xf1g_y" +
	"\xb9\xab\xcf9\xfap\x1b]\x7f\x88\xce\xeb\xcf\xcb>\xdf" +
	"\xb9_\x9f\xfe\xe3\xa3\xd6+`\\\x83\xa4sV\x07T" +
	"\x8a\x00\x87\xbfE\x87D\xc7\xa7\xa8\xa0\xec\xb1\xef\x9f\xab" +
	"\xb5N\xdf\xf1j\x98\xb2\\t\xbf(0\xa2b\xa4k" +
	"?7\xd1\xca\xff\xf0\xc4\x9b;R \xf2\xf0\xa2r\xe6" +
	"\xf5\xe8\x1a\xa0\xf7\xbd\x07\xee\xfc\xe4{>\xb8\xf9\xd7\x9e" +
	"\xcd\xf4_E\xff\x02\xa8\xff6*z\xfdf\xa3\xfc\x8b" +
	"\xe7\x9f\xbd\xf8\xb7\xd0v+\xb1\x0c\x82\xfa\xaf\xcf\xb8\x1b" +
	"\xbf{}\xe1\xef\xbb\xcfX\xaa\xfb\xae\xd8e\x9d\xc7\xc4" +
	"\x93\x19\x13\x18\xf7|\xe9\xd4\xe43\x97\x06\xff\xd1\xbb\xdb" +
	";\xb1\xcb\x80:\xf6\x89\xca\xc1_N}\xf3\xed\xeb\x8f" +
	"\xffs\xafrPr\xd5\xb7\xa5\x9f\xef\x13O\x8f\xf7\xad" +
	"\xc1\x88W0\x1d\xab8Z4\xb1Yof>l\x17" +
	"+\x00yD\xe3Z$\x00l1\x03\x80\xc8\xe6\xc6\x01" +
	"\x90\xb0\xe9%\x00T\xd8T\x1a\x00U6\xb6\x00\x80\x1a" +
	"\x1b\x11\x7f\x8b\xb0\xeb\x96\x00\xb2\xf5\x86i\x17+\xa9\x93" +
	"\x93\x13\x13\xb7x\xf2s\xb1\xe5\x00V\x93\xd6\xc4\xe4\x84" +
	"'>\x16[N\x15\x00R\xa6];>\xe1\xc9\xcfv" +
	"\xc9\xee9f[V\x95\x96\xb8m\xc41d\x04\xc6\xd2" +
	">_,q\xa2\xb3&K\xa4\x93\x9f\xa8\x98\xaew\xbb" +
	"\xd94\x0bV\xd5\x02\xc5]O\x1em\xba\x8e\x11W4" +
	"\x80\xc0\x85\xe8\xbb\x9b\x19w\x03a9\x8a\x9dSF_" +
	"\x0flz\x1c\x08\x1b\xa3H\x82\xb4@\xdf^bM\xc2" +
	"\x0eR\xaf\xe8wJ\xba\x16wf0UhY\xd5\xd2" +
	"\x0cz\xcb\x9c7\xcd\xaa\xb5\x0a\xc8g0\x8f\x18\xec\xa5" +
	"\xf8{\x95\xb8=\xeaW\xf1\xe1\xbc\x99\xb4\xcd\x9ac\xa8" +
	"\x8a\x0a\xa0\"\x00K\xec\x070\xa2\x0a\x1a\x03\x04\xd1\xc2" +
	"\x08\x10\x8c@\x07G\x0d\xe3\xf8c\x88!\x86\x97\xb8\xd3" +
	"\xaa\xba\x0e@\x18,\xb3\x036L0k\xcb\x02\xdc\x07" +
	"\x98W\x10\xfb}.\x01\xc5OA\x03\"\x1a\xcc[n" +
	"\xa5U\x98[\xe5uW\xca\xa1?@4\x87\x00\x8cO" +
	")hT\x08&\xd0\xf30\xa4L\xc63@\x12\xe4?" +
	"\xe2\xc7\xc0\x89l\xb1\x00$\xa1\xbc#~\x0c\x1c\xc3\xa6" +
	"\xc6\x81\xd0\xb5J\x03\xe3@0\x0e\x98-6j5\xcb" +
	"\xf5\x9a\xadju\x89\xaf\xb4\x80r\xc7MY\x8e\xd3\xe2" +
	"\xc1d\xd1+\xae\x9e7\x05\x89\xe0\x17\x8a\xba\x9c]\x9c" +
	"m\xb8\xa3\xf5\x86\xcb\xe7+r\x91\xe1|\xca\xdc\xcb\xf5" +
	"`\x87k\xa5\\\xc1\xfe\x8e\xaf\x00\xb1\x7f/+~o" +
	"!\xb6\xb6M\xe2\x01\xd4\\\x1a\xc0\x98Q\xd08B\x90" +
	"!\xcaLa9A\xd6G\x144\xf2\x04\x91\x0c\xb4=" +
	"%\x0a?\xa6\xa0q\x8c`\xb2n\xd6\xb8O\x01]\xe5" +
	"\xb6\xff\x9c\x14F\xc2d\xe7\x16\x04\xc4$\xfcO5-" +
	"\xf1\x94\xd4\xc0\xff/'i7\xa1\x1cZu\x1d\xb9\x91" +
	"\x1c\xf2\xe0\xa04\xfe\x81!i|\xa1\"\xa5\xb1L\xb9" +
	"mgm~7/\xba\xddvM\x95\x8e\xad7\xb9@" +
	"\x88J\x04\x96\x96\x08\xb1\x13\x00\xc9B\xab\xba\xecY\xf5" +
	"\x92\xb5j\x95Z\xa0\x98{\xdc.\x8eJi\xb8\xe2\x7f" +
	"U\xe9W\xffnD?7\x19+\x00a1\xea\xf9\xc7" +
	"\x09\x94\xd7\xdd\x1e\x06;\xd2(\x97\xb9=j6\x9b\xbc" +
	"^\xf2e\xb1\xcb\x10\xe9\x0e\x1d\xc9j\xa3\xec`\x02\x08" +
	"&\xe0\xaa8mg\xa1\xb3{lQ\xa3p\xbb3\xb6" +
	"\x7f\xc9\xa1\x7f\x991\x96\x01\xc24\x9am\xe3\xf4\x987" +
	"\xe4\xb3Q_\xfaB\xf9BX\xfd8\x80\xaaPVf" +
	"\x8f\xb2\xb4=\xcab\x84\x0c`d'\xae}ie\xeb" +
	"\xadZ\x81\xdb\xa8\x01A\x0d\x90\xd6\x9cr\xe05\xb3\xe8" +
	"Z\x8d\xba\xff\xb5\xb7\xa8d\xa0\x05\x9b_\x89\xc1R\xa3" +
	"\xce1\xd9y\xbb\xb8\x9aL\xdb\x88\xc1\x99D\x03\xc4\x1b" +
	"\x05\xe2\xb0\x82\xc6\xcd!\xeb\x8c\xcc\x02\x187(h\xdc" +
	"B0\xb9V1]\xec\xef\xdc\x04ms\xde\xdbh\x8a" +
	"=\x1c\xec\xef\xdc\x05\xbdl\x1b&\xb9\x1d)>\xbd\xb4" +
	"\x17\xbd\xd1^\xf4\xc6\xde%z{\xc4\xd2R\xb6\x1d\xdc" +
	"\xbd\xb3F\xdciY\x19t\xeb\xa1\xc0\x11\x97rW\xe0" +
	" \xb2\\z\xcf\xdc\x04\x91-.\x00\x18G\x144\xee" +
	"$W\x0a\x96\xa4\xbb\xde\x14\x07\x19\xbc\xfd\x01jI\x04" +
	"\xf4*\x0d\xc75\xe5[\x01\\%\x8e\xbah\xde\x89s" +
	"\x9f\xe7\xee\x80\xdc\x09\xc3\\&<\xaf2\x80\x8a\xe0y" +
	"(\x94\x90\x15\xd3\xa9\x04\xcc\x16l\xb3^\x0c\xbe\x86I" +
	"\xefM\x9ex\x07h\x07uHmvGX\xbe\xd8\xc6" +
	"D\xc7C\x0a\x1a\x93\x04=\xab\\o\xd8<\xbf\x0c\xa9" +
	"\xf2\xc7\x9b\xbc\x88\x08\x04\x11\x90V\x1bed\x9d\xd7Q" +
	"\x91n\x80\xff\x0d\x00\x00\xff\xff\xf9hQ\xf9"

func init() {
	schemas.Register(schema_902d2bfc3bbf0d43,
		0x838f23a24aa17915,
		0x8e22cadf94183d27,
		0x94f14654078c783e,
		0x985efa717f498039,
		0x992b0cc20a124b84,
		0x9fe0e82ce7dbd61e,
		0xa5eec3de87bdd251,
		0xaf9eac8061af076b,
		0xb17438a7cfbdf120,
		0xb28d687bb0cb1f6b,
		0xb8a5ce903391283e,
		0xbb6513902c830e39,
		0xc4db11d8bf7d0e78,
		0xcaa77452f9c37eeb,
		0xced160c65625ebcc,
		0xd1699ee23d138aae,
		0xd84b85756d95b69f,
		0xe95aba507536661c,
		0xf3a2260b5b588cb3,
		0xf5bdbbc1d36794d7,
		0xf64adeda9400745f,
		0xf71af9b93883827e,
		0xf85627eda839d41a)
}
