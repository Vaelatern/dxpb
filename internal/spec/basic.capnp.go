// Code generated by capnpc-go. DO NOT EDIT.

package spec

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Arch uint16

// Arch_TypeID is the unique identifier for the type Arch.
const Arch_TypeID = 0x838f23a24aa17915

// Values of Arch.
const (
	Arch_noarch    Arch = 0
	Arch_x8664     Arch = 1
	Arch_x8664Musl Arch = 2
	Arch_i686      Arch = 3
	Arch_i686Musl  Arch = 4
	Arch_armV6     Arch = 5
	Arch_armV6Musl Arch = 6
)

// String returns the enum's constant name.
func (c Arch) String() string {
	switch c {
	case Arch_noarch:
		return "noarch"
	case Arch_x8664:
		return "x8664"
	case Arch_x8664Musl:
		return "x8664Musl"
	case Arch_i686:
		return "i686"
	case Arch_i686Musl:
		return "i686Musl"
	case Arch_armV6:
		return "armV6"
	case Arch_armV6Musl:
		return "armV6Musl"

	default:
		return ""
	}
}

// ArchFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ArchFromString(c string) Arch {
	switch c {
	case "noarch":
		return Arch_noarch
	case "x8664":
		return Arch_x8664
	case "x8664Musl":
		return Arch_x8664Musl
	case "i686":
		return Arch_i686
	case "i686Musl":
		return Arch_i686Musl
	case "armV6":
		return Arch_armV6
	case "armV6Musl":
		return Arch_armV6Musl

	default:
		return 0
	}
}

type Arch_List struct{ capnp.List }

func NewArch_List(s *capnp.Segment, sz int32) (Arch_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Arch_List{l.List}, err
}

func (l Arch_List) At(i int) Arch {
	ul := capnp.UInt16List{List: l.List}
	return Arch(ul.At(i))
}

func (l Arch_List) Set(i int, v Arch) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Results uint16

// Results_TypeID is the unique identifier for the type Results.
const Results_TypeID = 0xb28d687bb0cb1f6b

// Values of Results.
const (
	Results_ok     Results = 0
	Results_err    Results = 1
	Results_reject Results = 2
)

// String returns the enum's constant name.
func (c Results) String() string {
	switch c {
	case Results_ok:
		return "ok"
	case Results_err:
		return "err"
	case Results_reject:
		return "reject"

	default:
		return ""
	}
}

// ResultsFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ResultsFromString(c string) Results {
	switch c {
	case "ok":
		return Results_ok
	case "err":
		return Results_err
	case "reject":
		return Results_reject

	default:
		return 0
	}
}

type Results_List struct{ capnp.List }

func NewResults_List(s *capnp.Segment, sz int32) (Results_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Results_List{l.List}, err
}

func (l Results_List) At(i int) Results {
	ul := capnp.UInt16List{List: l.List}
	return Results(ul.At(i))
}

func (l Results_List) Set(i int, v Results) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type BuildType uint16

// BuildType_TypeID is the unique identifier for the type BuildType.
const BuildType_TypeID = 0xb8a5ce903391283e

// Values of BuildType.
const (
	BuildType_bulk       BuildType = 0
	BuildType_individual BuildType = 1
)

// String returns the enum's constant name.
func (c BuildType) String() string {
	switch c {
	case BuildType_bulk:
		return "bulk"
	case BuildType_individual:
		return "individual"

	default:
		return ""
	}
}

// BuildTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func BuildTypeFromString(c string) BuildType {
	switch c {
	case "bulk":
		return BuildType_bulk
	case "individual":
		return BuildType_individual

	default:
		return 0
	}
}

type BuildType_List struct{ capnp.List }

func NewBuildType_List(s *capnp.Segment, sz int32) (BuildType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return BuildType_List{l.List}, err
}

func (l BuildType_List) At(i int) BuildType {
	ul := capnp.UInt16List{List: l.List}
	return BuildType(ul.At(i))
}

func (l BuildType_List) Set(i int, v BuildType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Logger struct{ Client capnp.Client }

// Logger_TypeID is the unique identifier for the type Logger.
const Logger_TypeID = 0xced160c65625ebcc

func (c Logger) Append(ctx context.Context, params func(Logger_append_Params) error, opts ...capnp.CallOption) Logger_append_Results_Promise {
	if c.Client == nil {
		return Logger_append_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xced160c65625ebcc,
			MethodID:      0,
			InterfaceName: "basic.capnp:Logger",
			MethodName:    "append",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Logger_append_Params{Struct: s}) }
	}
	return Logger_append_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Logger_Server interface {
	Append(Logger_append) error
}

func Logger_ServerToClient(s Logger_Server) Logger {
	c, _ := s.(server.Closer)
	return Logger{Client: server.New(Logger_Methods(nil, s), c)}
}

func Logger_Methods(methods []server.Method, s Logger_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xced160c65625ebcc,
			MethodID:      0,
			InterfaceName: "basic.capnp:Logger",
			MethodName:    "append",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Logger_append{c, opts, Logger_append_Params{Struct: p}, Logger_append_Results{Struct: r}}
			return s.Append(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	return methods
}

// Logger_append holds the arguments for a server call to Logger.append.
type Logger_append struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Logger_append_Params
	Results Logger_append_Results
}

type Logger_append_Params struct{ capnp.Struct }

// Logger_append_Params_TypeID is the unique identifier for the type Logger_append_Params.
const Logger_append_Params_TypeID = 0xc4db11d8bf7d0e78

func NewLogger_append_Params(s *capnp.Segment) (Logger_append_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Logger_append_Params{st}, err
}

func NewRootLogger_append_Params(s *capnp.Segment) (Logger_append_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Logger_append_Params{st}, err
}

func ReadRootLogger_append_Params(msg *capnp.Message) (Logger_append_Params, error) {
	root, err := msg.RootPtr()
	return Logger_append_Params{root.Struct()}, err
}

func (s Logger_append_Params) String() string {
	str, _ := text.Marshal(0xc4db11d8bf7d0e78, s.Struct)
	return str
}

func (s Logger_append_Params) Logs() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Logger_append_Params) HasLogs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Logger_append_Params) SetLogs(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Logger_append_Params_List is a list of Logger_append_Params.
type Logger_append_Params_List struct{ capnp.List }

// NewLogger_append_Params creates a new list of Logger_append_Params.
func NewLogger_append_Params_List(s *capnp.Segment, sz int32) (Logger_append_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Logger_append_Params_List{l}, err
}

func (s Logger_append_Params_List) At(i int) Logger_append_Params {
	return Logger_append_Params{s.List.Struct(i)}
}

func (s Logger_append_Params_List) Set(i int, v Logger_append_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Logger_append_Params_List) String() string {
	str, _ := text.MarshalList(0xc4db11d8bf7d0e78, s.List)
	return str
}

// Logger_append_Params_Promise is a wrapper for a Logger_append_Params promised by a client call.
type Logger_append_Params_Promise struct{ *capnp.Pipeline }

func (p Logger_append_Params_Promise) Struct() (Logger_append_Params, error) {
	s, err := p.Pipeline.Struct()
	return Logger_append_Params{s}, err
}

type Logger_append_Results struct{ capnp.Struct }

// Logger_append_Results_TypeID is the unique identifier for the type Logger_append_Results.
const Logger_append_Results_TypeID = 0xcaa77452f9c37eeb

func NewLogger_append_Results(s *capnp.Segment) (Logger_append_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Logger_append_Results{st}, err
}

func NewRootLogger_append_Results(s *capnp.Segment) (Logger_append_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Logger_append_Results{st}, err
}

func ReadRootLogger_append_Results(msg *capnp.Message) (Logger_append_Results, error) {
	root, err := msg.RootPtr()
	return Logger_append_Results{root.Struct()}, err
}

func (s Logger_append_Results) String() string {
	str, _ := text.Marshal(0xcaa77452f9c37eeb, s.Struct)
	return str
}

// Logger_append_Results_List is a list of Logger_append_Results.
type Logger_append_Results_List struct{ capnp.List }

// NewLogger_append_Results creates a new list of Logger_append_Results.
func NewLogger_append_Results_List(s *capnp.Segment, sz int32) (Logger_append_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Logger_append_Results_List{l}, err
}

func (s Logger_append_Results_List) At(i int) Logger_append_Results {
	return Logger_append_Results{s.List.Struct(i)}
}

func (s Logger_append_Results_List) Set(i int, v Logger_append_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Logger_append_Results_List) String() string {
	str, _ := text.MarshalList(0xcaa77452f9c37eeb, s.List)
	return str
}

// Logger_append_Results_Promise is a wrapper for a Logger_append_Results promised by a client call.
type Logger_append_Results_Promise struct{ *capnp.Pipeline }

func (p Logger_append_Results_Promise) Struct() (Logger_append_Results, error) {
	s, err := p.Pipeline.Struct()
	return Logger_append_Results{s}, err
}

type Builder struct{ Client capnp.Client }

// Builder_TypeID is the unique identifier for the type Builder.
const Builder_TypeID = 0x8e22cadf94183d27

func (c Builder) Capabilities(ctx context.Context, params func(Builder_capabilities_Params) error, opts ...capnp.CallOption) Builder_capabilities_Results_Promise {
	if c.Client == nil {
		return Builder_capabilities_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x8e22cadf94183d27,
			MethodID:      0,
			InterfaceName: "basic.capnp:Builder",
			MethodName:    "capabilities",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Builder_capabilities_Params{Struct: s}) }
	}
	return Builder_capabilities_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Builder) Build(ctx context.Context, params func(Builder_build_Params) error, opts ...capnp.CallOption) Builder_build_Results_Promise {
	if c.Client == nil {
		return Builder_build_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x8e22cadf94183d27,
			MethodID:      1,
			InterfaceName: "basic.capnp:Builder",
			MethodName:    "build",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Builder_build_Params{Struct: s}) }
	}
	return Builder_build_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Builder) Keepalive(ctx context.Context, params func(Builder_keepalive_Params) error, opts ...capnp.CallOption) Builder_keepalive_Results_Promise {
	if c.Client == nil {
		return Builder_keepalive_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x8e22cadf94183d27,
			MethodID:      2,
			InterfaceName: "basic.capnp:Builder",
			MethodName:    "keepalive",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Builder_keepalive_Params{Struct: s}) }
	}
	return Builder_keepalive_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Builder_Server interface {
	Capabilities(Builder_capabilities) error

	Build(Builder_build) error

	Keepalive(Builder_keepalive) error
}

func Builder_ServerToClient(s Builder_Server) Builder {
	c, _ := s.(server.Closer)
	return Builder{Client: server.New(Builder_Methods(nil, s), c)}
}

func Builder_Methods(methods []server.Method, s Builder_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8e22cadf94183d27,
			MethodID:      0,
			InterfaceName: "basic.capnp:Builder",
			MethodName:    "capabilities",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Builder_capabilities{c, opts, Builder_capabilities_Params{Struct: p}, Builder_capabilities_Results{Struct: r}}
			return s.Capabilities(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8e22cadf94183d27,
			MethodID:      1,
			InterfaceName: "basic.capnp:Builder",
			MethodName:    "build",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Builder_build{c, opts, Builder_build_Params{Struct: p}, Builder_build_Results{Struct: r}}
			return s.Build(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8e22cadf94183d27,
			MethodID:      2,
			InterfaceName: "basic.capnp:Builder",
			MethodName:    "keepalive",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Builder_keepalive{c, opts, Builder_keepalive_Params{Struct: p}, Builder_keepalive_Results{Struct: r}}
			return s.Keepalive(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	return methods
}

// Builder_capabilities holds the arguments for a server call to Builder.capabilities.
type Builder_capabilities struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Builder_capabilities_Params
	Results Builder_capabilities_Results
}

// Builder_build holds the arguments for a server call to Builder.build.
type Builder_build struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Builder_build_Params
	Results Builder_build_Results
}

// Builder_keepalive holds the arguments for a server call to Builder.keepalive.
type Builder_keepalive struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Builder_keepalive_Params
	Results Builder_keepalive_Results
}

type Builder_What struct{ capnp.Struct }

// Builder_What_TypeID is the unique identifier for the type Builder_What.
const Builder_What_TypeID = 0xaf9eac8061af076b

func NewBuilder_What(s *capnp.Segment) (Builder_What, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Builder_What{st}, err
}

func NewRootBuilder_What(s *capnp.Segment) (Builder_What, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Builder_What{st}, err
}

func ReadRootBuilder_What(msg *capnp.Message) (Builder_What, error) {
	root, err := msg.RootPtr()
	return Builder_What{root.Struct()}, err
}

func (s Builder_What) String() string {
	str, _ := text.Marshal(0xaf9eac8061af076b, s.Struct)
	return str
}

func (s Builder_What) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Builder_What) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Builder_What) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Builder_What) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Builder_What) Ver() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Builder_What) HasVer() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Builder_What) VerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Builder_What) SetVer(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Builder_What) Arch() Arch {
	return Arch(s.Struct.Uint16(0))
}

func (s Builder_What) SetArch(v Arch) {
	s.Struct.SetUint16(0, uint16(v))
}

// Builder_What_List is a list of Builder_What.
type Builder_What_List struct{ capnp.List }

// NewBuilder_What creates a new list of Builder_What.
func NewBuilder_What_List(s *capnp.Segment, sz int32) (Builder_What_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Builder_What_List{l}, err
}

func (s Builder_What_List) At(i int) Builder_What { return Builder_What{s.List.Struct(i)} }

func (s Builder_What_List) Set(i int, v Builder_What) error { return s.List.SetStruct(i, v.Struct) }

func (s Builder_What_List) String() string {
	str, _ := text.MarshalList(0xaf9eac8061af076b, s.List)
	return str
}

// Builder_What_Promise is a wrapper for a Builder_What promised by a client call.
type Builder_What_Promise struct{ *capnp.Pipeline }

func (p Builder_What_Promise) Struct() (Builder_What, error) {
	s, err := p.Pipeline.Struct()
	return Builder_What{s}, err
}

type Builder_Capability struct{ capnp.Struct }

// Builder_Capability_TypeID is the unique identifier for the type Builder_Capability.
const Builder_Capability_TypeID = 0xf64adeda9400745f

func NewBuilder_Capability(s *capnp.Segment) (Builder_Capability, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Builder_Capability{st}, err
}

func NewRootBuilder_Capability(s *capnp.Segment) (Builder_Capability, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Builder_Capability{st}, err
}

func ReadRootBuilder_Capability(msg *capnp.Message) (Builder_Capability, error) {
	root, err := msg.RootPtr()
	return Builder_Capability{root.Struct()}, err
}

func (s Builder_Capability) String() string {
	str, _ := text.Marshal(0xf64adeda9400745f, s.Struct)
	return str
}

func (s Builder_Capability) Arch() Arch {
	return Arch(s.Struct.Uint16(0))
}

func (s Builder_Capability) SetArch(v Arch) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Builder_Capability) Type() BuildType {
	return BuildType(s.Struct.Uint16(2) ^ 1)
}

func (s Builder_Capability) SetType(v BuildType) {
	s.Struct.SetUint16(2, uint16(v)^1)
}

func (s Builder_Capability) Hostarch() Arch {
	return Arch(s.Struct.Uint16(4))
}

func (s Builder_Capability) SetHostarch(v Arch) {
	s.Struct.SetUint16(4, uint16(v))
}

// Builder_Capability_List is a list of Builder_Capability.
type Builder_Capability_List struct{ capnp.List }

// NewBuilder_Capability creates a new list of Builder_Capability.
func NewBuilder_Capability_List(s *capnp.Segment, sz int32) (Builder_Capability_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Builder_Capability_List{l}, err
}

func (s Builder_Capability_List) At(i int) Builder_Capability {
	return Builder_Capability{s.List.Struct(i)}
}

func (s Builder_Capability_List) Set(i int, v Builder_Capability) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Builder_Capability_List) String() string {
	str, _ := text.MarshalList(0xf64adeda9400745f, s.List)
	return str
}

// Builder_Capability_Promise is a wrapper for a Builder_Capability promised by a client call.
type Builder_Capability_Promise struct{ *capnp.Pipeline }

func (p Builder_Capability_Promise) Struct() (Builder_Capability, error) {
	s, err := p.Pipeline.Struct()
	return Builder_Capability{s}, err
}

type Builder_Opts struct{ capnp.Struct }

// Builder_Opts_TypeID is the unique identifier for the type Builder_Opts.
const Builder_Opts_TypeID = 0xf85627eda839d41a

func NewBuilder_Opts(s *capnp.Segment) (Builder_Opts, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Builder_Opts{st}, err
}

func NewRootBuilder_Opts(s *capnp.Segment) (Builder_Opts, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Builder_Opts{st}, err
}

func ReadRootBuilder_Opts(msg *capnp.Message) (Builder_Opts, error) {
	root, err := msg.RootPtr()
	return Builder_Opts{root.Struct()}, err
}

func (s Builder_Opts) String() string {
	str, _ := text.Marshal(0xf85627eda839d41a, s.Struct)
	return str
}

func (s Builder_Opts) IgnorePkgSpec() bool {
	return s.Struct.Bit(0)
}

func (s Builder_Opts) SetIgnorePkgSpec(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Builder_Opts) Log() Logger {
	p, _ := s.Struct.Ptr(0)
	return Logger{Client: p.Interface().Client()}
}

func (s Builder_Opts) HasLog() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Builder_Opts) SetLog(v Logger) error {
	if v.Client == nil {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Builder_Opts_List is a list of Builder_Opts.
type Builder_Opts_List struct{ capnp.List }

// NewBuilder_Opts creates a new list of Builder_Opts.
func NewBuilder_Opts_List(s *capnp.Segment, sz int32) (Builder_Opts_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Builder_Opts_List{l}, err
}

func (s Builder_Opts_List) At(i int) Builder_Opts { return Builder_Opts{s.List.Struct(i)} }

func (s Builder_Opts_List) Set(i int, v Builder_Opts) error { return s.List.SetStruct(i, v.Struct) }

func (s Builder_Opts_List) String() string {
	str, _ := text.MarshalList(0xf85627eda839d41a, s.List)
	return str
}

// Builder_Opts_Promise is a wrapper for a Builder_Opts promised by a client call.
type Builder_Opts_Promise struct{ *capnp.Pipeline }

func (p Builder_Opts_Promise) Struct() (Builder_Opts, error) {
	s, err := p.Pipeline.Struct()
	return Builder_Opts{s}, err
}

func (p Builder_Opts_Promise) Log() Logger {
	return Logger{Client: p.Pipeline.GetPipeline(0).Client()}
}

type Builder_capabilities_Params struct{ capnp.Struct }

// Builder_capabilities_Params_TypeID is the unique identifier for the type Builder_capabilities_Params.
const Builder_capabilities_Params_TypeID = 0x9fe0e82ce7dbd61e

func NewBuilder_capabilities_Params(s *capnp.Segment) (Builder_capabilities_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Builder_capabilities_Params{st}, err
}

func NewRootBuilder_capabilities_Params(s *capnp.Segment) (Builder_capabilities_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Builder_capabilities_Params{st}, err
}

func ReadRootBuilder_capabilities_Params(msg *capnp.Message) (Builder_capabilities_Params, error) {
	root, err := msg.RootPtr()
	return Builder_capabilities_Params{root.Struct()}, err
}

func (s Builder_capabilities_Params) String() string {
	str, _ := text.Marshal(0x9fe0e82ce7dbd61e, s.Struct)
	return str
}

// Builder_capabilities_Params_List is a list of Builder_capabilities_Params.
type Builder_capabilities_Params_List struct{ capnp.List }

// NewBuilder_capabilities_Params creates a new list of Builder_capabilities_Params.
func NewBuilder_capabilities_Params_List(s *capnp.Segment, sz int32) (Builder_capabilities_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Builder_capabilities_Params_List{l}, err
}

func (s Builder_capabilities_Params_List) At(i int) Builder_capabilities_Params {
	return Builder_capabilities_Params{s.List.Struct(i)}
}

func (s Builder_capabilities_Params_List) Set(i int, v Builder_capabilities_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Builder_capabilities_Params_List) String() string {
	str, _ := text.MarshalList(0x9fe0e82ce7dbd61e, s.List)
	return str
}

// Builder_capabilities_Params_Promise is a wrapper for a Builder_capabilities_Params promised by a client call.
type Builder_capabilities_Params_Promise struct{ *capnp.Pipeline }

func (p Builder_capabilities_Params_Promise) Struct() (Builder_capabilities_Params, error) {
	s, err := p.Pipeline.Struct()
	return Builder_capabilities_Params{s}, err
}

type Builder_capabilities_Results struct{ capnp.Struct }

// Builder_capabilities_Results_TypeID is the unique identifier for the type Builder_capabilities_Results.
const Builder_capabilities_Results_TypeID = 0x985efa717f498039

func NewBuilder_capabilities_Results(s *capnp.Segment) (Builder_capabilities_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Builder_capabilities_Results{st}, err
}

func NewRootBuilder_capabilities_Results(s *capnp.Segment) (Builder_capabilities_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Builder_capabilities_Results{st}, err
}

func ReadRootBuilder_capabilities_Results(msg *capnp.Message) (Builder_capabilities_Results, error) {
	root, err := msg.RootPtr()
	return Builder_capabilities_Results{root.Struct()}, err
}

func (s Builder_capabilities_Results) String() string {
	str, _ := text.Marshal(0x985efa717f498039, s.Struct)
	return str
}

func (s Builder_capabilities_Results) Result() (Builder_Capability_List, error) {
	p, err := s.Struct.Ptr(0)
	return Builder_Capability_List{List: p.List()}, err
}

func (s Builder_capabilities_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Builder_capabilities_Results) SetResult(v Builder_Capability_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewResult sets the result field to a newly
// allocated Builder_Capability_List, preferring placement in s's segment.
func (s Builder_capabilities_Results) NewResult(n int32) (Builder_Capability_List, error) {
	l, err := NewBuilder_Capability_List(s.Struct.Segment(), n)
	if err != nil {
		return Builder_Capability_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Builder_capabilities_Results_List is a list of Builder_capabilities_Results.
type Builder_capabilities_Results_List struct{ capnp.List }

// NewBuilder_capabilities_Results creates a new list of Builder_capabilities_Results.
func NewBuilder_capabilities_Results_List(s *capnp.Segment, sz int32) (Builder_capabilities_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Builder_capabilities_Results_List{l}, err
}

func (s Builder_capabilities_Results_List) At(i int) Builder_capabilities_Results {
	return Builder_capabilities_Results{s.List.Struct(i)}
}

func (s Builder_capabilities_Results_List) Set(i int, v Builder_capabilities_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Builder_capabilities_Results_List) String() string {
	str, _ := text.MarshalList(0x985efa717f498039, s.List)
	return str
}

// Builder_capabilities_Results_Promise is a wrapper for a Builder_capabilities_Results promised by a client call.
type Builder_capabilities_Results_Promise struct{ *capnp.Pipeline }

func (p Builder_capabilities_Results_Promise) Struct() (Builder_capabilities_Results, error) {
	s, err := p.Pipeline.Struct()
	return Builder_capabilities_Results{s}, err
}

type Builder_build_Params struct{ capnp.Struct }

// Builder_build_Params_TypeID is the unique identifier for the type Builder_build_Params.
const Builder_build_Params_TypeID = 0xe95aba507536661c

func NewBuilder_build_Params(s *capnp.Segment) (Builder_build_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Builder_build_Params{st}, err
}

func NewRootBuilder_build_Params(s *capnp.Segment) (Builder_build_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Builder_build_Params{st}, err
}

func ReadRootBuilder_build_Params(msg *capnp.Message) (Builder_build_Params, error) {
	root, err := msg.RootPtr()
	return Builder_build_Params{root.Struct()}, err
}

func (s Builder_build_Params) String() string {
	str, _ := text.Marshal(0xe95aba507536661c, s.Struct)
	return str
}

func (s Builder_build_Params) What() (Builder_What, error) {
	p, err := s.Struct.Ptr(0)
	return Builder_What{Struct: p.Struct()}, err
}

func (s Builder_build_Params) HasWhat() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Builder_build_Params) SetWhat(v Builder_What) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewWhat sets the what field to a newly
// allocated Builder_What struct, preferring placement in s's segment.
func (s Builder_build_Params) NewWhat() (Builder_What, error) {
	ss, err := NewBuilder_What(s.Struct.Segment())
	if err != nil {
		return Builder_What{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Builder_build_Params) Options() (Builder_Opts, error) {
	p, err := s.Struct.Ptr(1)
	return Builder_Opts{Struct: p.Struct()}, err
}

func (s Builder_build_Params) HasOptions() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Builder_build_Params) SetOptions(v Builder_Opts) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewOptions sets the options field to a newly
// allocated Builder_Opts struct, preferring placement in s's segment.
func (s Builder_build_Params) NewOptions() (Builder_Opts, error) {
	ss, err := NewBuilder_Opts(s.Struct.Segment())
	if err != nil {
		return Builder_Opts{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Builder_build_Params_List is a list of Builder_build_Params.
type Builder_build_Params_List struct{ capnp.List }

// NewBuilder_build_Params creates a new list of Builder_build_Params.
func NewBuilder_build_Params_List(s *capnp.Segment, sz int32) (Builder_build_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Builder_build_Params_List{l}, err
}

func (s Builder_build_Params_List) At(i int) Builder_build_Params {
	return Builder_build_Params{s.List.Struct(i)}
}

func (s Builder_build_Params_List) Set(i int, v Builder_build_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Builder_build_Params_List) String() string {
	str, _ := text.MarshalList(0xe95aba507536661c, s.List)
	return str
}

// Builder_build_Params_Promise is a wrapper for a Builder_build_Params promised by a client call.
type Builder_build_Params_Promise struct{ *capnp.Pipeline }

func (p Builder_build_Params_Promise) Struct() (Builder_build_Params, error) {
	s, err := p.Pipeline.Struct()
	return Builder_build_Params{s}, err
}

func (p Builder_build_Params_Promise) What() Builder_What_Promise {
	return Builder_What_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Builder_build_Params_Promise) Options() Builder_Opts_Promise {
	return Builder_Opts_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Builder_build_Results struct{ capnp.Struct }

// Builder_build_Results_TypeID is the unique identifier for the type Builder_build_Results.
const Builder_build_Results_TypeID = 0xd84b85756d95b69f

func NewBuilder_build_Results(s *capnp.Segment) (Builder_build_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Builder_build_Results{st}, err
}

func NewRootBuilder_build_Results(s *capnp.Segment) (Builder_build_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Builder_build_Results{st}, err
}

func ReadRootBuilder_build_Results(msg *capnp.Message) (Builder_build_Results, error) {
	root, err := msg.RootPtr()
	return Builder_build_Results{root.Struct()}, err
}

func (s Builder_build_Results) String() string {
	str, _ := text.Marshal(0xd84b85756d95b69f, s.Struct)
	return str
}

func (s Builder_build_Results) Done() Results {
	return Results(s.Struct.Uint16(0))
}

func (s Builder_build_Results) SetDone(v Results) {
	s.Struct.SetUint16(0, uint16(v))
}

// Builder_build_Results_List is a list of Builder_build_Results.
type Builder_build_Results_List struct{ capnp.List }

// NewBuilder_build_Results creates a new list of Builder_build_Results.
func NewBuilder_build_Results_List(s *capnp.Segment, sz int32) (Builder_build_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Builder_build_Results_List{l}, err
}

func (s Builder_build_Results_List) At(i int) Builder_build_Results {
	return Builder_build_Results{s.List.Struct(i)}
}

func (s Builder_build_Results_List) Set(i int, v Builder_build_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Builder_build_Results_List) String() string {
	str, _ := text.MarshalList(0xd84b85756d95b69f, s.List)
	return str
}

// Builder_build_Results_Promise is a wrapper for a Builder_build_Results promised by a client call.
type Builder_build_Results_Promise struct{ *capnp.Pipeline }

func (p Builder_build_Results_Promise) Struct() (Builder_build_Results, error) {
	s, err := p.Pipeline.Struct()
	return Builder_build_Results{s}, err
}

type Builder_keepalive_Params struct{ capnp.Struct }

// Builder_keepalive_Params_TypeID is the unique identifier for the type Builder_keepalive_Params.
const Builder_keepalive_Params_TypeID = 0x94f14654078c783e

func NewBuilder_keepalive_Params(s *capnp.Segment) (Builder_keepalive_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Builder_keepalive_Params{st}, err
}

func NewRootBuilder_keepalive_Params(s *capnp.Segment) (Builder_keepalive_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Builder_keepalive_Params{st}, err
}

func ReadRootBuilder_keepalive_Params(msg *capnp.Message) (Builder_keepalive_Params, error) {
	root, err := msg.RootPtr()
	return Builder_keepalive_Params{root.Struct()}, err
}

func (s Builder_keepalive_Params) String() string {
	str, _ := text.Marshal(0x94f14654078c783e, s.Struct)
	return str
}

func (s Builder_keepalive_Params) I() uint8 {
	return s.Struct.Uint8(0)
}

func (s Builder_keepalive_Params) SetI(v uint8) {
	s.Struct.SetUint8(0, v)
}

// Builder_keepalive_Params_List is a list of Builder_keepalive_Params.
type Builder_keepalive_Params_List struct{ capnp.List }

// NewBuilder_keepalive_Params creates a new list of Builder_keepalive_Params.
func NewBuilder_keepalive_Params_List(s *capnp.Segment, sz int32) (Builder_keepalive_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Builder_keepalive_Params_List{l}, err
}

func (s Builder_keepalive_Params_List) At(i int) Builder_keepalive_Params {
	return Builder_keepalive_Params{s.List.Struct(i)}
}

func (s Builder_keepalive_Params_List) Set(i int, v Builder_keepalive_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Builder_keepalive_Params_List) String() string {
	str, _ := text.MarshalList(0x94f14654078c783e, s.List)
	return str
}

// Builder_keepalive_Params_Promise is a wrapper for a Builder_keepalive_Params promised by a client call.
type Builder_keepalive_Params_Promise struct{ *capnp.Pipeline }

func (p Builder_keepalive_Params_Promise) Struct() (Builder_keepalive_Params, error) {
	s, err := p.Pipeline.Struct()
	return Builder_keepalive_Params{s}, err
}

type Builder_keepalive_Results struct{ capnp.Struct }

// Builder_keepalive_Results_TypeID is the unique identifier for the type Builder_keepalive_Results.
const Builder_keepalive_Results_TypeID = 0xb17438a7cfbdf120

func NewBuilder_keepalive_Results(s *capnp.Segment) (Builder_keepalive_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Builder_keepalive_Results{st}, err
}

func NewRootBuilder_keepalive_Results(s *capnp.Segment) (Builder_keepalive_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Builder_keepalive_Results{st}, err
}

func ReadRootBuilder_keepalive_Results(msg *capnp.Message) (Builder_keepalive_Results, error) {
	root, err := msg.RootPtr()
	return Builder_keepalive_Results{root.Struct()}, err
}

func (s Builder_keepalive_Results) String() string {
	str, _ := text.Marshal(0xb17438a7cfbdf120, s.Struct)
	return str
}

func (s Builder_keepalive_Results) I() uint8 {
	return s.Struct.Uint8(0)
}

func (s Builder_keepalive_Results) SetI(v uint8) {
	s.Struct.SetUint8(0, v)
}

// Builder_keepalive_Results_List is a list of Builder_keepalive_Results.
type Builder_keepalive_Results_List struct{ capnp.List }

// NewBuilder_keepalive_Results creates a new list of Builder_keepalive_Results.
func NewBuilder_keepalive_Results_List(s *capnp.Segment, sz int32) (Builder_keepalive_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Builder_keepalive_Results_List{l}, err
}

func (s Builder_keepalive_Results_List) At(i int) Builder_keepalive_Results {
	return Builder_keepalive_Results{s.List.Struct(i)}
}

func (s Builder_keepalive_Results_List) Set(i int, v Builder_keepalive_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Builder_keepalive_Results_List) String() string {
	str, _ := text.MarshalList(0xb17438a7cfbdf120, s.List)
	return str
}

// Builder_keepalive_Results_Promise is a wrapper for a Builder_keepalive_Results promised by a client call.
type Builder_keepalive_Results_Promise struct{ *capnp.Pipeline }

func (p Builder_keepalive_Results_Promise) Struct() (Builder_keepalive_Results, error) {
	s, err := p.Pipeline.Struct()
	return Builder_keepalive_Results{s}, err
}

const schema_902d2bfc3bbf0d43 = "x\xda\x8cU]h\x1cU\x14>\xe7\xde\x99\x9d*\xbb" +
	"\x9d\xdcN\x0aRZWjJ\xeb\xda\x94\xa6-\xdb$" +
	"\x92n\xda\x1a5\xb1\xa1;1D\x0d\xf83\xd9\x1dw" +
	"\xa7;\xd9]gf\x93,R[\x91<\xf8\xdfB\x04" +
	"\x15ji\xa0TA\x89-TD(}\xd0*D\xa9" +
	"\x08*\xc5R\xf5Ej(>\xf4E\xb4\x0a#\xf7n" +
	"gg\xb7!\xd1\x97\xe12\xf3\xf1\x9d\xef|\xf7;g" +
	"\xb6\xbeBzI\x87|5\x02\xa0\xa7\xe5\x88\xbf\xbaz" +
	"b`\xf6\xee7^\x04\x16%\xfe\xde\xd8\xf9\xfb\xfe\xb9" +
	"\xb7\xfd\x08\x00j\x8f\xd3\x975\x83*\x00\xda\x13t\x0e" +
	"\xd0\xdf\xd8s\xc7\xcc\xcf\xf3\xeb_\x07\x16\xa5M\xc0s" +
	"tV\xbb@w\x02h\x0b\xf4K\xcd\x92\x14\x00\x7f\xd7" +
	"\xd4\xab\xca\xf0\x03\xd7g@oE\x04\xe0\xef\xb6\xebR" +
	"\x029\xaf\x94\x02\xf4\xbb\x0e\xf7\x1fz\xf6\xc6\x93o\x01" +
	"kE\x00\x199\xa0*\x0dp\xc0\xb4\x00\xdc\xf9\xc3\xe5" +
	"\xab\x9b\x7f\xfb\xe5x\x0d \x08\xceJ{\x10$\xbf\xa0" +
	"\xcc\x19\x87?xwNp\x87\xb2d\xc2\xb5\x1e\x93\xe6" +
	"\xb5\xf79Z;)q\xd5w]?\xf7\xcd\xa9N\xef" +
	"t\xa3\x90\x1ey\x1b\xaf\xd3'\xf3:\x85\xf8W\x1f=" +
	"\x97\x7f\xed\xcc\xa2\xfeMyV\x1b\x979\x93%\xef\x07" +
	"\xf4wm:\xba\xfd\xc8\xc5\x93\x9f,\x02\x1e\x94\xcfh" +
	"\xd3\x02\xf8\x82\xbc\x13\xd0\x9fZy\xf0\xfc%v\xf9s" +
	"`Z\xbd\xb5\x97\xe4\xdby\xc9\xa3\xa2\xe4\xb5\xe7?\xfb" +
	"k\xc8;5_\x03\x08I\xa7\xe5U\xbc\xb5\xaf\xafm" +
	"\x18\xf9\xe2\xe9o/.\xf2\xf8m\xf9\x1d\xed\x84\xa8q" +
	"L~P\xbb\xc0O\xfe\xf1\x8f\xdf\x1c\xafL?|\xa9" +
	"\xb1\xb5\x0f9\x0fjgE\x9d\xb5\xcf$+\xe9OG" +
	"\x17nz\xcc\xfd\xd9\xfe}M\xc8\x15y\x12\xf0\xef\xa7" +
	"\xbc\x99\x1f\x7f\x1a\xf8\xa3\xd9Ga^W\xe4\x86\xd6\x17" +
	"\xe1\xa7\xdd\x11n\xe3\x9a\xef\xba\xde\xfb}\xe3\xc8\x9f\xb7" +
	"z\xce\x9b\xd3\xaeD\xe6\xb5\x05\x01\xfe52\x09\xed\xfe" +
	"\x98\xe1Z\x99-\x19\x03\xcb\xc5r\xf7n'\x93\x07H" +
	"#\xeak\x91\x00\xb0\xc1n\x00D\xd6\xb7\x0d\x00\x09\xeb" +
	"\x19\x02@\xca\xba\x12\x00(\xb1\x8e\x01\x00\x94Y;\xff" +
	"\x16a\x1b\x86\x00R\xc5\x92\xe1d\xf2\xf1\xa9\xcedr" +
	"\x87/\x9e\x83\x15\x17\xd0V\xaddg\xd2\xe7\x8f\xc1\x8a" +
	"k\x03@\xdcp\xc6G\x92\xbex\xd6 \xcd:\xf6T" +
	",[\xc9\x9a\x8e\x1eE\x0c#\xc4X\"p\x81\xc5F" +
	"\xc36Y,\xa1>\x9a7<\x7f\xafQ6\xc6,\xdb" +
	"\x02\xeaU\xd5\xfde\xcf\xd5\xa3T\x06\xa8\xc7\x13\x83 " +
	"3\xfd\x00\x10\xd6\xaf`\xe8;\x067\xc4z\xb6\x01a" +
	"\x1d\x0a\x92\xfa``\x10L\xde&a\xeb\x14?\x13T" +
	"R=\xcbt{1>V\xb1\xecl/\xfa\x05\xd3," +
	"\x1b\xb65\x01h\xf6b\x1a\xb1\xde\x17\x0d\xfa\xca\x9a\xce" +
	"\x96\x00e\xb6\xa5\x0d\xd51\xc6]]\xa2\x12\x80\x84\x00" +
	",\xb6\x0a@_AQo%\x88\x16F\x80`\x04B" +
	"\x1e\xa9\x91'\x90\xc1E\xb4\x0d\x99n\xc5\xf6\\\x80F" +
	"\xb2\xee\x9bdm\x04S\x8e\x00\xe0J\xc04El\x09" +
	"\xbc\x04\xe4\xaf\xea\x05\x94%\x0b\xa4\x0d.\x15\x02`#" +
	"\x8e\xdb_\x0bN\xb4^\xbb/\x01\xa0\xf7R\xd4\xf7\x11" +
	"d\x88\"\xf7\xac\x7f=\x80~?E=M\x10Ik" +
	"-e\x1c\xf8\x10E}\x98\xa0Z4\xc6M\x8c\x02\xc1" +
	"(\xa02a:\xc1Y\xe5\xd1B5\\\x81\x80\xa8\xc2" +
	"\x7f\xfa;d\xc6\x85+\xff\xdf`\x11@\xee\xa5b{" +
	"\xae\xe8H\x88\\\xb7F\x8c\xc2\xea\xf5b\x14\xb8\xaf\xb4" +
	"TPL\xc7I9\xe6\x013\xe3-\x0ep<;\\" +
	"-\x9b\x9ca\x85``\x09\xc1p\xdb(\x80:V\xb1" +
	"\x0b\xbeU\xccZ\x13V\xb6\x02\xd4\xb0\x9b\xfb\xd8W\xca" +
	"\xe5Lg\x8bQ.\x9b\xc5l\xe0{\xd3\xbd&\xc2\x1e" +
	"T\xbb\x94s1\x06\x04c\xb7\xfa\xd1\xccS\x0b\x08\xba" +
	"\xcdR9\x86\x9a\x0e\xd7)\x89i\x09V\"\x06\xab\x8f" +
	"\xb1n LVR5\x9eer-\xa6\xa0^g)" +
	"\xbd\xd9R\xd1D5\\\xe6\xcb\xddd\x8d\xb1\xee\xc0\x8a" +
	":\xe3=\x9c\xb1\x8d\xa2\xbe\xb5!]\xed{\x00\xf4M" +
	"\x14\xf5\x1d\x04\xd5\xc9\xbc\xe1aK\xb8>\x00\xb1\x05\xf0" +
	"P\xa9\xecY\xa5\xa2\x8b-\xe1\x02\xa9}\xa9\x0b \x8d" +
	"\x02\xf8NI\x89\x11\xa86\xc4\x9b/\xc5E\xf1Fd" +
	"\xfd\x890\xde\x8c\xf0|#\xb2\xc1\x01\x00}\x1fE\xfd" +
	"1\xb2T\x8cU\xafZ\xe6\x9e\xd4\xff[\x80\xb2\x8a\x80" +
	"~\xbe\xe4z\x86\xd8\xca\xb0L\xf8\x9b\x14\xf3\xc5W\x9b" +
	"\xc5\x06\xb7\x9c\xd0\x98\xc0\xac\x0e>\x8a\x9b)\xea\x9d\x04" +
	"}+W,9f\xba\x00\xf1\xdc#e3\x83\x08\x04" +
	"\x11P\xb1K9d\xe1\xaf\x8e\x07\x18\xf0\xdf\x00\x00\x00" +
	"\xff\xfff\x94G\xbb"

func init() {
	schemas.Register(schema_902d2bfc3bbf0d43,
		0x838f23a24aa17915,
		0x8e22cadf94183d27,
		0x94f14654078c783e,
		0x985efa717f498039,
		0x9fe0e82ce7dbd61e,
		0xaf9eac8061af076b,
		0xb17438a7cfbdf120,
		0xb28d687bb0cb1f6b,
		0xb8a5ce903391283e,
		0xc4db11d8bf7d0e78,
		0xcaa77452f9c37eeb,
		0xced160c65625ebcc,
		0xd84b85756d95b69f,
		0xe95aba507536661c,
		0xf64adeda9400745f,
		0xf85627eda839d41a)
}
