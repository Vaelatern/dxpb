// Code generated by capnpc-go. DO NOT EDIT.

package spec

import (
	context "golang.org/x/net/context"
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Arch uint16

// Arch_TypeID is the unique identifier for the type Arch.
const Arch_TypeID = 0x838f23a24aa17915

// Values of Arch.
const (
	Arch_noarch    Arch = 0
	Arch_x8664     Arch = 1
	Arch_x8664Musl Arch = 2
	Arch_i686      Arch = 3
	Arch_i686Musl  Arch = 4
	Arch_armV6     Arch = 5
	Arch_armV6Musl Arch = 6
)

// String returns the enum's constant name.
func (c Arch) String() string {
	switch c {
	case Arch_noarch:
		return "noarch"
	case Arch_x8664:
		return "x8664"
	case Arch_x8664Musl:
		return "x8664Musl"
	case Arch_i686:
		return "i686"
	case Arch_i686Musl:
		return "i686Musl"
	case Arch_armV6:
		return "armV6"
	case Arch_armV6Musl:
		return "armV6Musl"

	default:
		return ""
	}
}

// ArchFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ArchFromString(c string) Arch {
	switch c {
	case "noarch":
		return Arch_noarch
	case "x8664":
		return Arch_x8664
	case "x8664Musl":
		return Arch_x8664Musl
	case "i686":
		return Arch_i686
	case "i686Musl":
		return Arch_i686Musl
	case "armV6":
		return Arch_armV6
	case "armV6Musl":
		return Arch_armV6Musl

	default:
		return 0
	}
}

type Arch_List struct{ capnp.List }

func NewArch_List(s *capnp.Segment, sz int32) (Arch_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Arch_List{l.List}, err
}

func (l Arch_List) At(i int) Arch {
	ul := capnp.UInt16List{List: l.List}
	return Arch(ul.At(i))
}

func (l Arch_List) Set(i int, v Arch) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type GithubEvent struct{ capnp.Struct }
type GithubEvent_commit GithubEvent
type GithubEvent_pullRequest GithubEvent
type GithubEvent_issue GithubEvent
type GithubEvent_Which uint16

const (
	GithubEvent_Which_commit      GithubEvent_Which = 0
	GithubEvent_Which_pullRequest GithubEvent_Which = 1
	GithubEvent_Which_issue       GithubEvent_Which = 2
)

func (w GithubEvent_Which) String() string {
	const s = "commitpullRequestissue"
	switch w {
	case GithubEvent_Which_commit:
		return s[0:6]
	case GithubEvent_Which_pullRequest:
		return s[6:17]
	case GithubEvent_Which_issue:
		return s[17:22]

	}
	return "GithubEvent_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// GithubEvent_TypeID is the unique identifier for the type GithubEvent.
const GithubEvent_TypeID = 0x992b0cc20a124b84

func NewGithubEvent(s *capnp.Segment) (GithubEvent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return GithubEvent{st}, err
}

func NewRootGithubEvent(s *capnp.Segment) (GithubEvent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return GithubEvent{st}, err
}

func ReadRootGithubEvent(msg *capnp.Message) (GithubEvent, error) {
	root, err := msg.RootPtr()
	return GithubEvent{root.Struct()}, err
}

func (s GithubEvent) String() string {
	str, _ := text.Marshal(0x992b0cc20a124b84, s.Struct)
	return str
}

func (s GithubEvent) Which() GithubEvent_Which {
	return GithubEvent_Which(s.Struct.Uint16(0))
}
func (s GithubEvent) Who() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s GithubEvent) HasWho() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s GithubEvent) WhoBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s GithubEvent) SetWho(v string) error {
	return s.Struct.SetText(0, v)
}

func (s GithubEvent) Commit() GithubEvent_commit { return GithubEvent_commit(s) }

func (s GithubEvent) SetCommit() {
	s.Struct.SetUint16(0, 0)
}

func (s GithubEvent_commit) Hash() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s GithubEvent_commit) HasHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s GithubEvent_commit) HashBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s GithubEvent_commit) SetHash(v string) error {
	return s.Struct.SetText(1, v)
}

func (s GithubEvent_commit) Branch() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s GithubEvent_commit) HasBranch() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s GithubEvent_commit) BranchBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s GithubEvent_commit) SetBranch(v string) error {
	return s.Struct.SetText(2, v)
}

func (s GithubEvent_commit) Msg() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s GithubEvent_commit) HasMsg() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s GithubEvent_commit) MsgBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s GithubEvent_commit) SetMsg(v string) error {
	return s.Struct.SetText(3, v)
}

func (s GithubEvent) PullRequest() GithubEvent_pullRequest { return GithubEvent_pullRequest(s) }

func (s GithubEvent) SetPullRequest() {
	s.Struct.SetUint16(0, 1)
}

func (s GithubEvent_pullRequest) Number() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s GithubEvent_pullRequest) SetNumber(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s GithubEvent_pullRequest) Msg() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s GithubEvent_pullRequest) HasMsg() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s GithubEvent_pullRequest) MsgBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s GithubEvent_pullRequest) SetMsg(v string) error {
	return s.Struct.SetText(1, v)
}

func (s GithubEvent_pullRequest) Action() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s GithubEvent_pullRequest) HasAction() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s GithubEvent_pullRequest) ActionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s GithubEvent_pullRequest) SetAction(v string) error {
	return s.Struct.SetText(2, v)
}

func (s GithubEvent) Issue() GithubEvent_issue { return GithubEvent_issue(s) }

func (s GithubEvent) SetIssue() {
	s.Struct.SetUint16(0, 2)
}

func (s GithubEvent_issue) Number() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s GithubEvent_issue) SetNumber(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s GithubEvent_issue) Msg() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s GithubEvent_issue) HasMsg() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s GithubEvent_issue) MsgBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s GithubEvent_issue) SetMsg(v string) error {
	return s.Struct.SetText(1, v)
}

func (s GithubEvent_issue) Action() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s GithubEvent_issue) HasAction() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s GithubEvent_issue) ActionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s GithubEvent_issue) SetAction(v string) error {
	return s.Struct.SetText(2, v)
}

// GithubEvent_List is a list of GithubEvent.
type GithubEvent_List struct{ capnp.List }

// NewGithubEvent creates a new list of GithubEvent.
func NewGithubEvent_List(s *capnp.Segment, sz int32) (GithubEvent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return GithubEvent_List{l}, err
}

func (s GithubEvent_List) At(i int) GithubEvent { return GithubEvent{s.List.Struct(i)} }

func (s GithubEvent_List) Set(i int, v GithubEvent) error { return s.List.SetStruct(i, v.Struct) }

func (s GithubEvent_List) String() string {
	str, _ := text.MarshalList(0x992b0cc20a124b84, s.List)
	return str
}

// GithubEvent_Promise is a wrapper for a GithubEvent promised by a client call.
type GithubEvent_Promise struct{ *capnp.Pipeline }

func (p GithubEvent_Promise) Struct() (GithubEvent, error) {
	s, err := p.Pipeline.Struct()
	return GithubEvent{s}, err
}

func (p GithubEvent_Promise) Commit() GithubEvent_commit_Promise {
	return GithubEvent_commit_Promise{p.Pipeline}
}

// GithubEvent_commit_Promise is a wrapper for a GithubEvent_commit promised by a client call.
type GithubEvent_commit_Promise struct{ *capnp.Pipeline }

func (p GithubEvent_commit_Promise) Struct() (GithubEvent_commit, error) {
	s, err := p.Pipeline.Struct()
	return GithubEvent_commit{s}, err
}

func (p GithubEvent_Promise) PullRequest() GithubEvent_pullRequest_Promise {
	return GithubEvent_pullRequest_Promise{p.Pipeline}
}

// GithubEvent_pullRequest_Promise is a wrapper for a GithubEvent_pullRequest promised by a client call.
type GithubEvent_pullRequest_Promise struct{ *capnp.Pipeline }

func (p GithubEvent_pullRequest_Promise) Struct() (GithubEvent_pullRequest, error) {
	s, err := p.Pipeline.Struct()
	return GithubEvent_pullRequest{s}, err
}

func (p GithubEvent_Promise) Issue() GithubEvent_issue_Promise {
	return GithubEvent_issue_Promise{p.Pipeline}
}

// GithubEvent_issue_Promise is a wrapper for a GithubEvent_issue promised by a client call.
type GithubEvent_issue_Promise struct{ *capnp.Pipeline }

func (p GithubEvent_issue_Promise) Struct() (GithubEvent_issue, error) {
	s, err := p.Pipeline.Struct()
	return GithubEvent_issue{s}, err
}

type Results uint16

// Results_TypeID is the unique identifier for the type Results.
const Results_TypeID = 0xb28d687bb0cb1f6b

// Values of Results.
const (
	Results_ok     Results = 0
	Results_err    Results = 1
	Results_reject Results = 2
)

// String returns the enum's constant name.
func (c Results) String() string {
	switch c {
	case Results_ok:
		return "ok"
	case Results_err:
		return "err"
	case Results_reject:
		return "reject"

	default:
		return ""
	}
}

// ResultsFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ResultsFromString(c string) Results {
	switch c {
	case "ok":
		return Results_ok
	case "err":
		return Results_err
	case "reject":
		return Results_reject

	default:
		return 0
	}
}

type Results_List struct{ capnp.List }

func NewResults_List(s *capnp.Segment, sz int32) (Results_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Results_List{l.List}, err
}

func (l Results_List) At(i int) Results {
	ul := capnp.UInt16List{List: l.List}
	return Results(ul.At(i))
}

func (l Results_List) Set(i int, v Results) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type BuildType uint16

// BuildType_TypeID is the unique identifier for the type BuildType.
const BuildType_TypeID = 0xb8a5ce903391283e

// Values of BuildType.
const (
	BuildType_bulk       BuildType = 0
	BuildType_individual BuildType = 1
)

// String returns the enum's constant name.
func (c BuildType) String() string {
	switch c {
	case BuildType_bulk:
		return "bulk"
	case BuildType_individual:
		return "individual"

	default:
		return ""
	}
}

// BuildTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func BuildTypeFromString(c string) BuildType {
	switch c {
	case "bulk":
		return BuildType_bulk
	case "individual":
		return BuildType_individual

	default:
		return 0
	}
}

type BuildType_List struct{ capnp.List }

func NewBuildType_List(s *capnp.Segment, sz int32) (BuildType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return BuildType_List{l.List}, err
}

func (l BuildType_List) At(i int) BuildType {
	ul := capnp.UInt16List{List: l.List}
	return BuildType(ul.At(i))
}

func (l BuildType_List) Set(i int, v BuildType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Logger struct{ Client capnp.Client }

// Logger_TypeID is the unique identifier for the type Logger.
const Logger_TypeID = 0xced160c65625ebcc

func (c Logger) Append(ctx context.Context, params func(Logger_append_Params) error, opts ...capnp.CallOption) Logger_append_Results_Promise {
	if c.Client == nil {
		return Logger_append_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xced160c65625ebcc,
			MethodID:      0,
			InterfaceName: "basic.capnp:Logger",
			MethodName:    "append",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Logger_append_Params{Struct: s}) }
	}
	return Logger_append_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Logger_Server interface {
	Append(Logger_append) error
}

func Logger_ServerToClient(s Logger_Server) Logger {
	c, _ := s.(server.Closer)
	return Logger{Client: server.New(Logger_Methods(nil, s), c)}
}

func Logger_Methods(methods []server.Method, s Logger_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xced160c65625ebcc,
			MethodID:      0,
			InterfaceName: "basic.capnp:Logger",
			MethodName:    "append",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Logger_append{c, opts, Logger_append_Params{Struct: p}, Logger_append_Results{Struct: r}}
			return s.Append(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	return methods
}

// Logger_append holds the arguments for a server call to Logger.append.
type Logger_append struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Logger_append_Params
	Results Logger_append_Results
}

type Logger_append_Params struct{ capnp.Struct }

// Logger_append_Params_TypeID is the unique identifier for the type Logger_append_Params.
const Logger_append_Params_TypeID = 0xc4db11d8bf7d0e78

func NewLogger_append_Params(s *capnp.Segment) (Logger_append_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Logger_append_Params{st}, err
}

func NewRootLogger_append_Params(s *capnp.Segment) (Logger_append_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Logger_append_Params{st}, err
}

func ReadRootLogger_append_Params(msg *capnp.Message) (Logger_append_Params, error) {
	root, err := msg.RootPtr()
	return Logger_append_Params{root.Struct()}, err
}

func (s Logger_append_Params) String() string {
	str, _ := text.Marshal(0xc4db11d8bf7d0e78, s.Struct)
	return str
}

func (s Logger_append_Params) Logs() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Logger_append_Params) HasLogs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Logger_append_Params) SetLogs(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Logger_append_Params_List is a list of Logger_append_Params.
type Logger_append_Params_List struct{ capnp.List }

// NewLogger_append_Params creates a new list of Logger_append_Params.
func NewLogger_append_Params_List(s *capnp.Segment, sz int32) (Logger_append_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Logger_append_Params_List{l}, err
}

func (s Logger_append_Params_List) At(i int) Logger_append_Params {
	return Logger_append_Params{s.List.Struct(i)}
}

func (s Logger_append_Params_List) Set(i int, v Logger_append_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Logger_append_Params_List) String() string {
	str, _ := text.MarshalList(0xc4db11d8bf7d0e78, s.List)
	return str
}

// Logger_append_Params_Promise is a wrapper for a Logger_append_Params promised by a client call.
type Logger_append_Params_Promise struct{ *capnp.Pipeline }

func (p Logger_append_Params_Promise) Struct() (Logger_append_Params, error) {
	s, err := p.Pipeline.Struct()
	return Logger_append_Params{s}, err
}

type Logger_append_Results struct{ capnp.Struct }

// Logger_append_Results_TypeID is the unique identifier for the type Logger_append_Results.
const Logger_append_Results_TypeID = 0xcaa77452f9c37eeb

func NewLogger_append_Results(s *capnp.Segment) (Logger_append_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Logger_append_Results{st}, err
}

func NewRootLogger_append_Results(s *capnp.Segment) (Logger_append_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Logger_append_Results{st}, err
}

func ReadRootLogger_append_Results(msg *capnp.Message) (Logger_append_Results, error) {
	root, err := msg.RootPtr()
	return Logger_append_Results{root.Struct()}, err
}

func (s Logger_append_Results) String() string {
	str, _ := text.Marshal(0xcaa77452f9c37eeb, s.Struct)
	return str
}

// Logger_append_Results_List is a list of Logger_append_Results.
type Logger_append_Results_List struct{ capnp.List }

// NewLogger_append_Results creates a new list of Logger_append_Results.
func NewLogger_append_Results_List(s *capnp.Segment, sz int32) (Logger_append_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Logger_append_Results_List{l}, err
}

func (s Logger_append_Results_List) At(i int) Logger_append_Results {
	return Logger_append_Results{s.List.Struct(i)}
}

func (s Logger_append_Results_List) Set(i int, v Logger_append_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Logger_append_Results_List) String() string {
	str, _ := text.MarshalList(0xcaa77452f9c37eeb, s.List)
	return str
}

// Logger_append_Results_Promise is a wrapper for a Logger_append_Results promised by a client call.
type Logger_append_Results_Promise struct{ *capnp.Pipeline }

func (p Logger_append_Results_Promise) Struct() (Logger_append_Results, error) {
	s, err := p.Pipeline.Struct()
	return Logger_append_Results{s}, err
}

type IrcBot struct{ Client capnp.Client }

// IrcBot_TypeID is the unique identifier for the type IrcBot.
const IrcBot_TypeID = 0xbb6513902c830e39

func (c IrcBot) NoteGhEvent(ctx context.Context, params func(IrcBot_noteGhEvent_Params) error, opts ...capnp.CallOption) IrcBot_noteGhEvent_Results_Promise {
	if c.Client == nil {
		return IrcBot_noteGhEvent_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xbb6513902c830e39,
			MethodID:      0,
			InterfaceName: "basic.capnp:IrcBot",
			MethodName:    "noteGhEvent",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(IrcBot_noteGhEvent_Params{Struct: s}) }
	}
	return IrcBot_noteGhEvent_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type IrcBot_Server interface {
	NoteGhEvent(IrcBot_noteGhEvent) error
}

func IrcBot_ServerToClient(s IrcBot_Server) IrcBot {
	c, _ := s.(server.Closer)
	return IrcBot{Client: server.New(IrcBot_Methods(nil, s), c)}
}

func IrcBot_Methods(methods []server.Method, s IrcBot_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbb6513902c830e39,
			MethodID:      0,
			InterfaceName: "basic.capnp:IrcBot",
			MethodName:    "noteGhEvent",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := IrcBot_noteGhEvent{c, opts, IrcBot_noteGhEvent_Params{Struct: p}, IrcBot_noteGhEvent_Results{Struct: r}}
			return s.NoteGhEvent(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	return methods
}

// IrcBot_noteGhEvent holds the arguments for a server call to IrcBot.noteGhEvent.
type IrcBot_noteGhEvent struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  IrcBot_noteGhEvent_Params
	Results IrcBot_noteGhEvent_Results
}

type IrcBot_noteGhEvent_Params struct{ capnp.Struct }

// IrcBot_noteGhEvent_Params_TypeID is the unique identifier for the type IrcBot_noteGhEvent_Params.
const IrcBot_noteGhEvent_Params_TypeID = 0xa5eec3de87bdd251

func NewIrcBot_noteGhEvent_Params(s *capnp.Segment) (IrcBot_noteGhEvent_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IrcBot_noteGhEvent_Params{st}, err
}

func NewRootIrcBot_noteGhEvent_Params(s *capnp.Segment) (IrcBot_noteGhEvent_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IrcBot_noteGhEvent_Params{st}, err
}

func ReadRootIrcBot_noteGhEvent_Params(msg *capnp.Message) (IrcBot_noteGhEvent_Params, error) {
	root, err := msg.RootPtr()
	return IrcBot_noteGhEvent_Params{root.Struct()}, err
}

func (s IrcBot_noteGhEvent_Params) String() string {
	str, _ := text.Marshal(0xa5eec3de87bdd251, s.Struct)
	return str
}

func (s IrcBot_noteGhEvent_Params) Gh() (GithubEvent, error) {
	p, err := s.Struct.Ptr(0)
	return GithubEvent{Struct: p.Struct()}, err
}

func (s IrcBot_noteGhEvent_Params) HasGh() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IrcBot_noteGhEvent_Params) SetGh(v GithubEvent) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGh sets the gh field to a newly
// allocated GithubEvent struct, preferring placement in s's segment.
func (s IrcBot_noteGhEvent_Params) NewGh() (GithubEvent, error) {
	ss, err := NewGithubEvent(s.Struct.Segment())
	if err != nil {
		return GithubEvent{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// IrcBot_noteGhEvent_Params_List is a list of IrcBot_noteGhEvent_Params.
type IrcBot_noteGhEvent_Params_List struct{ capnp.List }

// NewIrcBot_noteGhEvent_Params creates a new list of IrcBot_noteGhEvent_Params.
func NewIrcBot_noteGhEvent_Params_List(s *capnp.Segment, sz int32) (IrcBot_noteGhEvent_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IrcBot_noteGhEvent_Params_List{l}, err
}

func (s IrcBot_noteGhEvent_Params_List) At(i int) IrcBot_noteGhEvent_Params {
	return IrcBot_noteGhEvent_Params{s.List.Struct(i)}
}

func (s IrcBot_noteGhEvent_Params_List) Set(i int, v IrcBot_noteGhEvent_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IrcBot_noteGhEvent_Params_List) String() string {
	str, _ := text.MarshalList(0xa5eec3de87bdd251, s.List)
	return str
}

// IrcBot_noteGhEvent_Params_Promise is a wrapper for a IrcBot_noteGhEvent_Params promised by a client call.
type IrcBot_noteGhEvent_Params_Promise struct{ *capnp.Pipeline }

func (p IrcBot_noteGhEvent_Params_Promise) Struct() (IrcBot_noteGhEvent_Params, error) {
	s, err := p.Pipeline.Struct()
	return IrcBot_noteGhEvent_Params{s}, err
}

func (p IrcBot_noteGhEvent_Params_Promise) Gh() GithubEvent_Promise {
	return GithubEvent_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type IrcBot_noteGhEvent_Results struct{ capnp.Struct }

// IrcBot_noteGhEvent_Results_TypeID is the unique identifier for the type IrcBot_noteGhEvent_Results.
const IrcBot_noteGhEvent_Results_TypeID = 0xf5bdbbc1d36794d7

func NewIrcBot_noteGhEvent_Results(s *capnp.Segment) (IrcBot_noteGhEvent_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IrcBot_noteGhEvent_Results{st}, err
}

func NewRootIrcBot_noteGhEvent_Results(s *capnp.Segment) (IrcBot_noteGhEvent_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IrcBot_noteGhEvent_Results{st}, err
}

func ReadRootIrcBot_noteGhEvent_Results(msg *capnp.Message) (IrcBot_noteGhEvent_Results, error) {
	root, err := msg.RootPtr()
	return IrcBot_noteGhEvent_Results{root.Struct()}, err
}

func (s IrcBot_noteGhEvent_Results) String() string {
	str, _ := text.Marshal(0xf5bdbbc1d36794d7, s.Struct)
	return str
}

// IrcBot_noteGhEvent_Results_List is a list of IrcBot_noteGhEvent_Results.
type IrcBot_noteGhEvent_Results_List struct{ capnp.List }

// NewIrcBot_noteGhEvent_Results creates a new list of IrcBot_noteGhEvent_Results.
func NewIrcBot_noteGhEvent_Results_List(s *capnp.Segment, sz int32) (IrcBot_noteGhEvent_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return IrcBot_noteGhEvent_Results_List{l}, err
}

func (s IrcBot_noteGhEvent_Results_List) At(i int) IrcBot_noteGhEvent_Results {
	return IrcBot_noteGhEvent_Results{s.List.Struct(i)}
}

func (s IrcBot_noteGhEvent_Results_List) Set(i int, v IrcBot_noteGhEvent_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IrcBot_noteGhEvent_Results_List) String() string {
	str, _ := text.MarshalList(0xf5bdbbc1d36794d7, s.List)
	return str
}

// IrcBot_noteGhEvent_Results_Promise is a wrapper for a IrcBot_noteGhEvent_Results promised by a client call.
type IrcBot_noteGhEvent_Results_Promise struct{ *capnp.Pipeline }

func (p IrcBot_noteGhEvent_Results_Promise) Struct() (IrcBot_noteGhEvent_Results, error) {
	s, err := p.Pipeline.Struct()
	return IrcBot_noteGhEvent_Results{s}, err
}

type Builder struct{ Client capnp.Client }

// Builder_TypeID is the unique identifier for the type Builder.
const Builder_TypeID = 0x8e22cadf94183d27

func (c Builder) Capabilities(ctx context.Context, params func(Builder_capabilities_Params) error, opts ...capnp.CallOption) Builder_capabilities_Results_Promise {
	if c.Client == nil {
		return Builder_capabilities_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x8e22cadf94183d27,
			MethodID:      0,
			InterfaceName: "basic.capnp:Builder",
			MethodName:    "capabilities",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Builder_capabilities_Params{Struct: s}) }
	}
	return Builder_capabilities_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Builder) Build(ctx context.Context, params func(Builder_build_Params) error, opts ...capnp.CallOption) Builder_build_Results_Promise {
	if c.Client == nil {
		return Builder_build_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x8e22cadf94183d27,
			MethodID:      1,
			InterfaceName: "basic.capnp:Builder",
			MethodName:    "build",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Builder_build_Params{Struct: s}) }
	}
	return Builder_build_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Builder_Server interface {
	Capabilities(Builder_capabilities) error

	Build(Builder_build) error
}

func Builder_ServerToClient(s Builder_Server) Builder {
	c, _ := s.(server.Closer)
	return Builder{Client: server.New(Builder_Methods(nil, s), c)}
}

func Builder_Methods(methods []server.Method, s Builder_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8e22cadf94183d27,
			MethodID:      0,
			InterfaceName: "basic.capnp:Builder",
			MethodName:    "capabilities",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Builder_capabilities{c, opts, Builder_capabilities_Params{Struct: p}, Builder_capabilities_Results{Struct: r}}
			return s.Capabilities(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8e22cadf94183d27,
			MethodID:      1,
			InterfaceName: "basic.capnp:Builder",
			MethodName:    "build",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Builder_build{c, opts, Builder_build_Params{Struct: p}, Builder_build_Results{Struct: r}}
			return s.Build(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	return methods
}

// Builder_capabilities holds the arguments for a server call to Builder.capabilities.
type Builder_capabilities struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Builder_capabilities_Params
	Results Builder_capabilities_Results
}

// Builder_build holds the arguments for a server call to Builder.build.
type Builder_build struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Builder_build_Params
	Results Builder_build_Results
}

type Builder_What struct{ capnp.Struct }

// Builder_What_TypeID is the unique identifier for the type Builder_What.
const Builder_What_TypeID = 0xaf9eac8061af076b

func NewBuilder_What(s *capnp.Segment) (Builder_What, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Builder_What{st}, err
}

func NewRootBuilder_What(s *capnp.Segment) (Builder_What, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Builder_What{st}, err
}

func ReadRootBuilder_What(msg *capnp.Message) (Builder_What, error) {
	root, err := msg.RootPtr()
	return Builder_What{root.Struct()}, err
}

func (s Builder_What) String() string {
	str, _ := text.Marshal(0xaf9eac8061af076b, s.Struct)
	return str
}

func (s Builder_What) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Builder_What) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Builder_What) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Builder_What) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Builder_What) Ver() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Builder_What) HasVer() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Builder_What) VerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Builder_What) SetVer(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Builder_What) Arch() Arch {
	return Arch(s.Struct.Uint16(0))
}

func (s Builder_What) SetArch(v Arch) {
	s.Struct.SetUint16(0, uint16(v))
}

// Builder_What_List is a list of Builder_What.
type Builder_What_List struct{ capnp.List }

// NewBuilder_What creates a new list of Builder_What.
func NewBuilder_What_List(s *capnp.Segment, sz int32) (Builder_What_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Builder_What_List{l}, err
}

func (s Builder_What_List) At(i int) Builder_What { return Builder_What{s.List.Struct(i)} }

func (s Builder_What_List) Set(i int, v Builder_What) error { return s.List.SetStruct(i, v.Struct) }

func (s Builder_What_List) String() string {
	str, _ := text.MarshalList(0xaf9eac8061af076b, s.List)
	return str
}

// Builder_What_Promise is a wrapper for a Builder_What promised by a client call.
type Builder_What_Promise struct{ *capnp.Pipeline }

func (p Builder_What_Promise) Struct() (Builder_What, error) {
	s, err := p.Pipeline.Struct()
	return Builder_What{s}, err
}

type Builder_Capability struct{ capnp.Struct }

// Builder_Capability_TypeID is the unique identifier for the type Builder_Capability.
const Builder_Capability_TypeID = 0xf64adeda9400745f

func NewBuilder_Capability(s *capnp.Segment) (Builder_Capability, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Builder_Capability{st}, err
}

func NewRootBuilder_Capability(s *capnp.Segment) (Builder_Capability, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Builder_Capability{st}, err
}

func ReadRootBuilder_Capability(msg *capnp.Message) (Builder_Capability, error) {
	root, err := msg.RootPtr()
	return Builder_Capability{root.Struct()}, err
}

func (s Builder_Capability) String() string {
	str, _ := text.Marshal(0xf64adeda9400745f, s.Struct)
	return str
}

func (s Builder_Capability) Arch() Arch {
	return Arch(s.Struct.Uint16(0))
}

func (s Builder_Capability) SetArch(v Arch) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Builder_Capability) Type() BuildType {
	return BuildType(s.Struct.Uint16(2) ^ 1)
}

func (s Builder_Capability) SetType(v BuildType) {
	s.Struct.SetUint16(2, uint16(v)^1)
}

func (s Builder_Capability) Hostarch() Arch {
	return Arch(s.Struct.Uint16(4))
}

func (s Builder_Capability) SetHostarch(v Arch) {
	s.Struct.SetUint16(4, uint16(v))
}

// Builder_Capability_List is a list of Builder_Capability.
type Builder_Capability_List struct{ capnp.List }

// NewBuilder_Capability creates a new list of Builder_Capability.
func NewBuilder_Capability_List(s *capnp.Segment, sz int32) (Builder_Capability_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Builder_Capability_List{l}, err
}

func (s Builder_Capability_List) At(i int) Builder_Capability {
	return Builder_Capability{s.List.Struct(i)}
}

func (s Builder_Capability_List) Set(i int, v Builder_Capability) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Builder_Capability_List) String() string {
	str, _ := text.MarshalList(0xf64adeda9400745f, s.List)
	return str
}

// Builder_Capability_Promise is a wrapper for a Builder_Capability promised by a client call.
type Builder_Capability_Promise struct{ *capnp.Pipeline }

func (p Builder_Capability_Promise) Struct() (Builder_Capability, error) {
	s, err := p.Pipeline.Struct()
	return Builder_Capability{s}, err
}

type Builder_Opts struct{ capnp.Struct }

// Builder_Opts_TypeID is the unique identifier for the type Builder_Opts.
const Builder_Opts_TypeID = 0xf85627eda839d41a

func NewBuilder_Opts(s *capnp.Segment) (Builder_Opts, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Builder_Opts{st}, err
}

func NewRootBuilder_Opts(s *capnp.Segment) (Builder_Opts, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Builder_Opts{st}, err
}

func ReadRootBuilder_Opts(msg *capnp.Message) (Builder_Opts, error) {
	root, err := msg.RootPtr()
	return Builder_Opts{root.Struct()}, err
}

func (s Builder_Opts) String() string {
	str, _ := text.Marshal(0xf85627eda839d41a, s.Struct)
	return str
}

func (s Builder_Opts) IgnorePkgSpec() bool {
	return s.Struct.Bit(0)
}

func (s Builder_Opts) SetIgnorePkgSpec(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Builder_Opts) Log() Logger {
	p, _ := s.Struct.Ptr(0)
	return Logger{Client: p.Interface().Client()}
}

func (s Builder_Opts) HasLog() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Builder_Opts) SetLog(v Logger) error {
	if v.Client == nil {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Builder_Opts_List is a list of Builder_Opts.
type Builder_Opts_List struct{ capnp.List }

// NewBuilder_Opts creates a new list of Builder_Opts.
func NewBuilder_Opts_List(s *capnp.Segment, sz int32) (Builder_Opts_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Builder_Opts_List{l}, err
}

func (s Builder_Opts_List) At(i int) Builder_Opts { return Builder_Opts{s.List.Struct(i)} }

func (s Builder_Opts_List) Set(i int, v Builder_Opts) error { return s.List.SetStruct(i, v.Struct) }

func (s Builder_Opts_List) String() string {
	str, _ := text.MarshalList(0xf85627eda839d41a, s.List)
	return str
}

// Builder_Opts_Promise is a wrapper for a Builder_Opts promised by a client call.
type Builder_Opts_Promise struct{ *capnp.Pipeline }

func (p Builder_Opts_Promise) Struct() (Builder_Opts, error) {
	s, err := p.Pipeline.Struct()
	return Builder_Opts{s}, err
}

func (p Builder_Opts_Promise) Log() Logger {
	return Logger{Client: p.Pipeline.GetPipeline(0).Client()}
}

type Builder_capabilities_Params struct{ capnp.Struct }

// Builder_capabilities_Params_TypeID is the unique identifier for the type Builder_capabilities_Params.
const Builder_capabilities_Params_TypeID = 0x9fe0e82ce7dbd61e

func NewBuilder_capabilities_Params(s *capnp.Segment) (Builder_capabilities_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Builder_capabilities_Params{st}, err
}

func NewRootBuilder_capabilities_Params(s *capnp.Segment) (Builder_capabilities_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Builder_capabilities_Params{st}, err
}

func ReadRootBuilder_capabilities_Params(msg *capnp.Message) (Builder_capabilities_Params, error) {
	root, err := msg.RootPtr()
	return Builder_capabilities_Params{root.Struct()}, err
}

func (s Builder_capabilities_Params) String() string {
	str, _ := text.Marshal(0x9fe0e82ce7dbd61e, s.Struct)
	return str
}

// Builder_capabilities_Params_List is a list of Builder_capabilities_Params.
type Builder_capabilities_Params_List struct{ capnp.List }

// NewBuilder_capabilities_Params creates a new list of Builder_capabilities_Params.
func NewBuilder_capabilities_Params_List(s *capnp.Segment, sz int32) (Builder_capabilities_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Builder_capabilities_Params_List{l}, err
}

func (s Builder_capabilities_Params_List) At(i int) Builder_capabilities_Params {
	return Builder_capabilities_Params{s.List.Struct(i)}
}

func (s Builder_capabilities_Params_List) Set(i int, v Builder_capabilities_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Builder_capabilities_Params_List) String() string {
	str, _ := text.MarshalList(0x9fe0e82ce7dbd61e, s.List)
	return str
}

// Builder_capabilities_Params_Promise is a wrapper for a Builder_capabilities_Params promised by a client call.
type Builder_capabilities_Params_Promise struct{ *capnp.Pipeline }

func (p Builder_capabilities_Params_Promise) Struct() (Builder_capabilities_Params, error) {
	s, err := p.Pipeline.Struct()
	return Builder_capabilities_Params{s}, err
}

type Builder_capabilities_Results struct{ capnp.Struct }

// Builder_capabilities_Results_TypeID is the unique identifier for the type Builder_capabilities_Results.
const Builder_capabilities_Results_TypeID = 0x985efa717f498039

func NewBuilder_capabilities_Results(s *capnp.Segment) (Builder_capabilities_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Builder_capabilities_Results{st}, err
}

func NewRootBuilder_capabilities_Results(s *capnp.Segment) (Builder_capabilities_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Builder_capabilities_Results{st}, err
}

func ReadRootBuilder_capabilities_Results(msg *capnp.Message) (Builder_capabilities_Results, error) {
	root, err := msg.RootPtr()
	return Builder_capabilities_Results{root.Struct()}, err
}

func (s Builder_capabilities_Results) String() string {
	str, _ := text.Marshal(0x985efa717f498039, s.Struct)
	return str
}

func (s Builder_capabilities_Results) Result() (Builder_Capability_List, error) {
	p, err := s.Struct.Ptr(0)
	return Builder_Capability_List{List: p.List()}, err
}

func (s Builder_capabilities_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Builder_capabilities_Results) SetResult(v Builder_Capability_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewResult sets the result field to a newly
// allocated Builder_Capability_List, preferring placement in s's segment.
func (s Builder_capabilities_Results) NewResult(n int32) (Builder_Capability_List, error) {
	l, err := NewBuilder_Capability_List(s.Struct.Segment(), n)
	if err != nil {
		return Builder_Capability_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Builder_capabilities_Results_List is a list of Builder_capabilities_Results.
type Builder_capabilities_Results_List struct{ capnp.List }

// NewBuilder_capabilities_Results creates a new list of Builder_capabilities_Results.
func NewBuilder_capabilities_Results_List(s *capnp.Segment, sz int32) (Builder_capabilities_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Builder_capabilities_Results_List{l}, err
}

func (s Builder_capabilities_Results_List) At(i int) Builder_capabilities_Results {
	return Builder_capabilities_Results{s.List.Struct(i)}
}

func (s Builder_capabilities_Results_List) Set(i int, v Builder_capabilities_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Builder_capabilities_Results_List) String() string {
	str, _ := text.MarshalList(0x985efa717f498039, s.List)
	return str
}

// Builder_capabilities_Results_Promise is a wrapper for a Builder_capabilities_Results promised by a client call.
type Builder_capabilities_Results_Promise struct{ *capnp.Pipeline }

func (p Builder_capabilities_Results_Promise) Struct() (Builder_capabilities_Results, error) {
	s, err := p.Pipeline.Struct()
	return Builder_capabilities_Results{s}, err
}

type Builder_build_Params struct{ capnp.Struct }

// Builder_build_Params_TypeID is the unique identifier for the type Builder_build_Params.
const Builder_build_Params_TypeID = 0xe95aba507536661c

func NewBuilder_build_Params(s *capnp.Segment) (Builder_build_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Builder_build_Params{st}, err
}

func NewRootBuilder_build_Params(s *capnp.Segment) (Builder_build_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Builder_build_Params{st}, err
}

func ReadRootBuilder_build_Params(msg *capnp.Message) (Builder_build_Params, error) {
	root, err := msg.RootPtr()
	return Builder_build_Params{root.Struct()}, err
}

func (s Builder_build_Params) String() string {
	str, _ := text.Marshal(0xe95aba507536661c, s.Struct)
	return str
}

func (s Builder_build_Params) What() (Builder_What, error) {
	p, err := s.Struct.Ptr(0)
	return Builder_What{Struct: p.Struct()}, err
}

func (s Builder_build_Params) HasWhat() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Builder_build_Params) SetWhat(v Builder_What) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewWhat sets the what field to a newly
// allocated Builder_What struct, preferring placement in s's segment.
func (s Builder_build_Params) NewWhat() (Builder_What, error) {
	ss, err := NewBuilder_What(s.Struct.Segment())
	if err != nil {
		return Builder_What{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Builder_build_Params) Options() (Builder_Opts, error) {
	p, err := s.Struct.Ptr(1)
	return Builder_Opts{Struct: p.Struct()}, err
}

func (s Builder_build_Params) HasOptions() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Builder_build_Params) SetOptions(v Builder_Opts) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewOptions sets the options field to a newly
// allocated Builder_Opts struct, preferring placement in s's segment.
func (s Builder_build_Params) NewOptions() (Builder_Opts, error) {
	ss, err := NewBuilder_Opts(s.Struct.Segment())
	if err != nil {
		return Builder_Opts{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Builder_build_Params_List is a list of Builder_build_Params.
type Builder_build_Params_List struct{ capnp.List }

// NewBuilder_build_Params creates a new list of Builder_build_Params.
func NewBuilder_build_Params_List(s *capnp.Segment, sz int32) (Builder_build_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Builder_build_Params_List{l}, err
}

func (s Builder_build_Params_List) At(i int) Builder_build_Params {
	return Builder_build_Params{s.List.Struct(i)}
}

func (s Builder_build_Params_List) Set(i int, v Builder_build_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Builder_build_Params_List) String() string {
	str, _ := text.MarshalList(0xe95aba507536661c, s.List)
	return str
}

// Builder_build_Params_Promise is a wrapper for a Builder_build_Params promised by a client call.
type Builder_build_Params_Promise struct{ *capnp.Pipeline }

func (p Builder_build_Params_Promise) Struct() (Builder_build_Params, error) {
	s, err := p.Pipeline.Struct()
	return Builder_build_Params{s}, err
}

func (p Builder_build_Params_Promise) What() Builder_What_Promise {
	return Builder_What_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Builder_build_Params_Promise) Options() Builder_Opts_Promise {
	return Builder_Opts_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Builder_build_Results struct{ capnp.Struct }

// Builder_build_Results_TypeID is the unique identifier for the type Builder_build_Results.
const Builder_build_Results_TypeID = 0xd84b85756d95b69f

func NewBuilder_build_Results(s *capnp.Segment) (Builder_build_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Builder_build_Results{st}, err
}

func NewRootBuilder_build_Results(s *capnp.Segment) (Builder_build_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Builder_build_Results{st}, err
}

func ReadRootBuilder_build_Results(msg *capnp.Message) (Builder_build_Results, error) {
	root, err := msg.RootPtr()
	return Builder_build_Results{root.Struct()}, err
}

func (s Builder_build_Results) String() string {
	str, _ := text.Marshal(0xd84b85756d95b69f, s.Struct)
	return str
}

func (s Builder_build_Results) Done() Results {
	return Results(s.Struct.Uint16(0))
}

func (s Builder_build_Results) SetDone(v Results) {
	s.Struct.SetUint16(0, uint16(v))
}

// Builder_build_Results_List is a list of Builder_build_Results.
type Builder_build_Results_List struct{ capnp.List }

// NewBuilder_build_Results creates a new list of Builder_build_Results.
func NewBuilder_build_Results_List(s *capnp.Segment, sz int32) (Builder_build_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Builder_build_Results_List{l}, err
}

func (s Builder_build_Results_List) At(i int) Builder_build_Results {
	return Builder_build_Results{s.List.Struct(i)}
}

func (s Builder_build_Results_List) Set(i int, v Builder_build_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Builder_build_Results_List) String() string {
	str, _ := text.MarshalList(0xd84b85756d95b69f, s.List)
	return str
}

// Builder_build_Results_Promise is a wrapper for a Builder_build_Results promised by a client call.
type Builder_build_Results_Promise struct{ *capnp.Pipeline }

func (p Builder_build_Results_Promise) Struct() (Builder_build_Results, error) {
	s, err := p.Pipeline.Struct()
	return Builder_build_Results{s}, err
}

const schema_902d2bfc3bbf0d43 = "x\xda\xacVml\x14k\x15>\xe7\x9d\xaf]\xdce" +
	"\xfb2%\xc1\x06\xdc\xa4\x16\x81B\x1b\xdabi\xd7\xd4" +
	"-\xc5\xa6\xb6\xd0\xb0S\x09\x124\xea\xec\xee\xb8;t" +
	"\xbf\x98\x0fJ\xa3|D$$D\x14\x12H\x84\x04\x08" +
	"M\x88\xfePQ\x8cF$\x84\x00bbU\x12T\x14" +
	"%\xe0\xc7\x1f\xbc!\xdc\x1f\xf7\xe6~\xc0\xfd\x98\x9bw" +
	"\xb63;\xed.\xfc\xba\x7f&\xef\xce\x9e}\xce9\xcf" +
	"y\xce\xf3\xee\xfaos\x83\xa4K\xb8\x10\x02P\xb2\x82" +
	"\xe8,\x9d\xbe86\xf3\xe9\x1f\x1c\x06\x1a!\xce\xe6\xe8" +
	"\x8d\xcf\xbd\xbf\xb6\xe3\x04\x00\xca\x9f\xe5\x8f\xc9\x03\xbc\x04" +
	" \xf7\xf3\x97\x01\x9dU\x03\xcbN\xfd{\xb6\xf5\xfb@" +
	"#\xdc\xbc\xc03\xfc\x8c|\x91\xdf\x08 \xdf\xe1\x8f\xca" +
	"\x9f\x14$\x00\xa7\xff\xd0\xe8\xc1=/\xbe\xf6C\xa0\xcd" +
	"\x08 \xa0\x04\xd0\x83\xc2\x18\x02\xcaQ!\x09\xe8|w" +
	"\xcb\x92E\xb7\"k\xcf\x80\x12\xc1@\xdea^\xe2\x00" +
	"\xe4\x01\xe1\x96<\xcc\x80\xe4M\xc2\x13@\xe7S\x7f\x7f" +
	"\xf8d\xdd\xff\xffs\xa1\x0a\xc7\x8a\xea\xb9#\x0c!\xf0" +
	"\x8e\xf2\x97\xebG\x1f\xdf~\xfd\x12P\xd9O\xf4S\xa1" +
	"\x9b%\xfa\x95\x9bhR\xba\xac\x1e\xfa\xc9\xf9\xcb\xa04" +
	"c\xa0\x09\x810\xf4\xfb\xc2\xac\xfc_7\xcf#\x81\xf5" +
	"8\x19\xff\xe3\xcf\xbf\x95?~\xa5\x8e\x0c[\x9c\x91\xf7" +
	"\x8b,pZ\xdc\x06\xe8|~\xf5\xc9\x9e\x13w/\xfd" +
	"\xa6.\xf0\xb8xE>\xed\x06\x9e\x147\x02:\xfd\x8b" +
	"\x0f\xaf;!k\xd7\xeaY\x13\xcf\xca\x17\xdd\xc0s\xe2" +
	"\x88\xfc\x07vr\xf6-\xde\x7f\xe3\x01}\xf8\xbb`3" +
	"\xbf\x10\x17\xb1f\xae\x8a\xac\x99\xa7\x07n?\x9f\xb0~" +
	"4[\x0dpy\xf8\xa7\xb8\x84\xf1\xf0\xa7\xa7+w\xfc" +
	"\xfe\x1b\xf7\xee\xd6\xe5\xb9)\x9e\xad\xa2\xcbw\xc4\x11\xf9" +
	"\x99\x9b\xe7g\xc7\xe4\x81\xff\x9d\xd7\xef\x81\xb2\x0cIm" +
	"\x14Ky\x09\x01z\xee\x8b\xad,\xe3#\x911r\xe1" +
	"\xd7\xa7\x8b\xf6\x91-\x0f\\\xfa\xe6R\xda\xd2\x12\x16\xb0" +
	"_b%-\xfff\xaf\x9d\xfa\xed\xae\xd7\xe6&\xcdh" +
	"\xed9'\xb95_\x92\xa6\x00\x9d_~o\xe7W>" +
	"\xf1\x99\x997\x1b&\x931\xf4\x06\xa0,\x84X\xae\x7f" +
	"\x9c\xca\xfd\xf5\xe6\xb5\xebo\x05\xba;\x17J \xf0\xef" +
	"}\xdd:\xf5\xaf\xc7co\xcf\x1f\xa1\xab\xcd#\xa1\x17" +
	"\xf2\xc9\x10;\x1dw1\x0e|\xe7p\xdf\xd5\xe7-\xef" +
	"4\xce\xb6&\xfc\x02P\xee\x08\xb3\xc8\x96\xbf\xf5\xff\xf8" +
	"\xd9\xaa\x1d\xef.\x14\x06\xba\\\x85g\xe5{av\xfa" +
	"sx\x0a:\x9c\xb4j\xea\x99\xce\x8c\x8a\x95R%\xb1" +
	"\xc9\xc8\xe4\x01R\x88\xcar$\x00t<\x01\x80H\x87" +
	"\xbb\x01\x90\xd0\x81\x09\x00\xe4h\x7f;\x00\xf2\xb4k\x0c" +
	"\x00\x05\xda\xc1\xbe\x13\xe9\xca\x09\x80d\xa9\xac\x1a\x99|" +
	"|__o\xef\x06\xc7}\x8e\xdb&`!\xa6\xf7\xf6" +
	"\xf5:\xec1n\x9b\x05\x00\x88\xabFqG\xaf\xe3>" +
	"\xab!\xf3\xeb\x18\xb2\xf5\x82\x94\xd5\x0c%\x82\x01\x9dS" +
	"\xda\xee\xf1E\xa3\xbbjm\xd2h{\xec\xcby\xd5r" +
	"6\xab\x155\xad\x17t\xe0\xac\xe9\xd8\xb6\x8ae*!" +
	"N\x00\xf0\x97\x0c\xbd\xe5\xa5]\xbb\x81\xd05\x12\xd6\xa6" +
	"\x8c\x9e\x1e\xe8\x8an \x94JN\xc6C\x8bY\xbaf" +
	"\x0eb<m\xeb\x85\xec \xa6\x10\xfdjy\xaf\xda\xac" +
	"ftz?`\xe1m\x13\x9ai\x17,\x13@\xe19" +
	"\x1e\x80G\x00\x1aM\x00(!\x0e\x956\x82I\xc3\x0d" +
	"\xc0\xc5\x80)\x0e\xb1\xc9\xeb\x0c\x90\xbd\xf2\x13\x10\x96`" +
	"D\xb7\xf2vzx\xafV\xb2\xdc\xe14\xf9\x88j+" +
	"\x80\xf2U\x0e\x95<\xc1(:\x0e\x06tB\xb5\x04\x90" +
	"(\xf9\x90\xbd\xf4\xf7\x82\x8e\xa7\x81D\xb9\x0f\xd8K_" +
	"\xbf\xb4\xbf\x1b\x884\x95/c\x04\x08F\x00\x93\x99r" +
	"\xb1\xa8[N\xc5.\x14&\xb4=6H\x9ai\xc5u" +
	"\xd3\xb45\xbf\xb2\xd0K[O\xa9\x86Z4\xc1\x0bd" +
	"q\xa3Ff\xa8lu\x96\xca\x966\x92w\x1biK" +
	"\xc5\xdd\xb0 =-s\xf44\x13\xe4ryl\xaa\xa9" +
	"\x1c\x10\x9b\x16\xb2\xe2\xe5f\xa3\xaf\x8a6\xe2C\x0d\xb7" +
	"\x03(\x83\x1c*[\x09RDw\xc3\xe9(#\xeb\x0b" +
	"\x1c*)\x82H\x9a\xab\x0ag\x81_\xe4P\xd9N0" +
	"VR\x8b\x9aG\x81\xb4W3\xbcs\x8c\xc9\x1ac\xb5" +
	"\x1b\x05\x10c\x81r\\\xcd\xb2\x81K\x05\xcbt\x0bq" +
	"\xb1W\xb4\xb8\xdb\xb3\xb4\xd5\xdd\x1e6|\xae<)i" +
	"\x86\x914\xb4\xddZ\xc6\xaa\xd7|<\xbb}\xba\xa21" +
	"\x84\x90\x8b@\xdb]\x84\xf0.\x80X\xda.L:z" +
	")\xab\xef\xd5\xb36p\xea\x82\x95a\x0cse\x8b\xfd" +
	"\x96wE\xef\xdd\x1f\xe8\x99\x0f\xa5i 4,9\xde" +
	"\x14@\xd2J\xd6|=s\x0cjk9\x97\xd3\x8cN" +
	"\xb5R\xd1JYo\x9a\xf3t\xdc^\x1bT\xacP\xce" +
	"\x99\x18\x05\x82Qx%Nu!\xd0\x9c_6\x8b\xe1" +
	"4\xa3V\xb6wS\xa0w#P\x9a\x00B\x05)Y" +
	"\xc5iPo`=:=\xc52\xc12=4a3" +
	"\xf2L\x10\x89\x05\x82\x10\x16\x08\x82\x12\xd2\x8c\xe2\x9c\xe7" +
	"y\x8aH\x96\xecbZ3P\x00\x82\x02\xa0T4s" +
	"\xfe\x8a\xa8\x19K/\x97\xbc\x8f\xf3+\xf2\xa4\xe9:\x86" +
	"\xdf\xf9\xcb\x18\xcc\x96K\x1a\xc6jW\xf4\x02u5@" +
	"\xf4g\x12\xf2\x11\xd70\xc46\x0e\x95\xf5\x01\xc5w\x0c" +
	"\x01(\xab9T6\x10\x8cM\xe5U\x0b\x9bjvZ" +
	"\xdd\xa9\x83\xe5\x0a\xeb\xc3\xc4\xa6\x9a\xa16\xda\xb6 \xc9" +
	"U'\xf0\xe8\x95\x1a\xd1\x1bjDo\xf8c\xa2\xb7\x81" +
	"\x9bL$\xab~\xdb\xd8\"\xd8\xc5\x90t\xfdi:\xe0" +
	"\x13\xecf\xab\xf3\x09D:\xda\xbe\xa0n\x82H\xc7\xc7" +
	"\x00\x94\xad\x1c*;\xc9\xcb\xfc fMW\xd8 \xfd" +
	"\xbfP\x80B\x0c\x01\x9d|\xd9\xb4T\xf7j\x85W\xb8" +
	"H\x1d\xcds.\xec\xf1\\\xefks\x1e6\x9a\x08\xd6" +
	"\xcb5#\xc7xn\x0d\x18[^5\xf3>\xb3iC" +
	"-e\xfc\x8fA\xd2\x1b\x93\xc7.\xd2\xaa\xbf\x06\xd4f" +
	"\xd4\x84\xe5\x89\xad\x8be\\\xc7\xa1\xd2G\xd0\xd1s\xa5" +
	"\xb2\xa1\xa5&!\x9e\xfbRE\xcb \x02A\x04\x94\x0a" +
	"\xe5\x1c\xd2\xda\x7f:\xe6n\x80\x1f\x05\x00\x00\xff\xff4" +
	"\xf4\x12\x9e"

func init() {
	schemas.Register(schema_902d2bfc3bbf0d43,
		0x838f23a24aa17915,
		0x8e22cadf94183d27,
		0x985efa717f498039,
		0x992b0cc20a124b84,
		0x9fe0e82ce7dbd61e,
		0xa5eec3de87bdd251,
		0xaf9eac8061af076b,
		0xb28d687bb0cb1f6b,
		0xb8a5ce903391283e,
		0xbb6513902c830e39,
		0xc4db11d8bf7d0e78,
		0xcaa77452f9c37eeb,
		0xced160c65625ebcc,
		0xd1699ee23d138aae,
		0xd84b85756d95b69f,
		0xe95aba507536661c,
		0xf3a2260b5b588cb3,
		0xf5bdbbc1d36794d7,
		0xf64adeda9400745f,
		0xf71af9b93883827e,
		0xf85627eda839d41a)
}
